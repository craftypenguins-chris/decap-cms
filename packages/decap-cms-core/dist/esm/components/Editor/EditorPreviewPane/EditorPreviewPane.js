import _styled from "@emotion/styled/base";
import PropTypes from 'prop-types';
import React from 'react';
import { List, Map } from 'immutable';
import ImmutablePropTypes from 'react-immutable-proptypes';
import Frame, { FrameContextConsumer } from 'react-frame-component';
import { lengths } from 'decap-cms-ui-default';
import { connect } from 'react-redux';
import { encodeEntry } from '../../../lib/stega';
import { resolveWidget, getPreviewTemplate, getPreviewStyles, getRemarkPlugins } from '../../../lib/registry';
import { getAllEntries, tryLoadEntry } from '../../../actions/entries';
import { ErrorBoundary } from '../../UI';
import { selectTemplateName, selectInferredField, selectField } from '../../../reducers/collections';
import { boundGetAsset } from '../../../actions/media';
import { selectIsLoadingAsset } from '../../../reducers/medias';
import { INFERABLE_FIELDS } from '../../../constants/fieldInference';
import EditorPreviewContent from './EditorPreviewContent.js';
import PreviewHOC from './PreviewHOC';
import EditorPreview from './EditorPreview';
import { jsx as ___EmotionJSX } from "@emotion/react";
const PreviewPaneFrame = /*#__PURE__*/_styled(Frame, {
  target: "enus48h1",
  label: "PreviewPaneFrame"
})("width:100%;height:100%;border:none;background:#fff;border-radius:", lengths.borderRadius, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ExternalPreviewIframe = /*#__PURE__*/_styled("iframe", {
  target: "enus48h0",
  label: "ExternalPreviewIframe"
})("width:100%;height:100%;border:none;display:block;background:#fff;border-radius:", lengths.borderRadius, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export class PreviewPane extends React.Component {
  getWidget = (field, value, metadata, props, idx = null) => {
    const {
      getAsset,
      entry
    } = props;
    const widget = resolveWidget(field.get('widget'));
    const key = idx ? field.get('name') + '_' + idx : field.get('name');
    const valueIsInMap = value && !widget.allowMapValue && Map.isMap(value);

    /**
     * Use an HOC to provide conditional updates for all previews.
     */
    return !widget.preview ? null : ___EmotionJSX(PreviewHOC, {
      previewComponent: widget.preview,
      key: key,
      field: field,
      getAsset: getAsset,
      value: valueIsInMap ? value.get(field.get('name')) : value,
      entry: entry,
      fieldsMetaData: metadata,
      resolveWidget: resolveWidget,
      getRemarkPlugins: getRemarkPlugins
    });
  };
  inferredFields = {};
  inferFields() {
    const titleField = selectInferredField(this.props.collection, 'title');
    const shortTitleField = selectInferredField(this.props.collection, 'shortTitle');
    const authorField = selectInferredField(this.props.collection, 'author');
    this.inferredFields = {};
    if (titleField) this.inferredFields[titleField] = INFERABLE_FIELDS.title;
    if (shortTitleField) this.inferredFields[shortTitleField] = INFERABLE_FIELDS.shortTitle;
    if (authorField) this.inferredFields[authorField] = INFERABLE_FIELDS.author;
  }

  /**
   * Returns the widget component for a named field, and makes recursive calls
   * to retrieve components for nested and deeply nested fields, which occur in
   * object and list type fields. Used internally to retrieve widgets, and also
   * exposed for use in custom preview templates.
   */
  widgetFor = (name, fields = this.props.fields, values = this.props.entry.get('data'), fieldsMetaData = this.props.fieldsMetaData) => {
    // We retrieve the field by name so that this function can also be used in
    // custom preview templates, where the field object can't be passed in.
    let field = fields && fields.find(f => f.get('name') === name);
    let value = Map.isMap(values) && values.get(field.get('name'));
    if (field.get('meta')) {
      value = this.props.entry.getIn(['meta', field.get('name')]);
    }
    const nestedFields = field.get('fields');
    const singleField = field.get('field');
    const metadata = fieldsMetaData && fieldsMetaData.get(field.get('name'), Map());
    if (nestedFields) {
      field = field.set('fields', this.getNestedWidgets(nestedFields, value, metadata));
    }
    if (singleField) {
      field = field.set('field', this.getSingleNested(singleField, value, metadata));
    }
    const labelledWidgets = ['string', 'text', 'number'];
    const inferredField = Object.entries(this.inferredFields).filter(([key]) => {
      const fieldToMatch = selectField(this.props.collection, key);
      return fieldToMatch === field;
    }).map(([, value]) => value)[0];
    if (inferredField) {
      value = inferredField.defaultPreview(value);
    } else if (value && labelledWidgets.indexOf(field.get('widget')) !== -1 && value.toString().length < 50) {
      value = ___EmotionJSX("div", null, ___EmotionJSX("strong", null, field.get('label', field.get('name')), ":"), " ", value);
    }
    return value ? this.getWidget(field, value, metadata, this.props) : null;
  };

  /**
   * Retrieves widgets for nested fields (children of object/list fields)
   */
  getNestedWidgets = (fields, values, fieldsMetaData) => {
    // Fields nested within a list field will be paired with a List of value Maps.
    if (List.isList(values)) {
      return values.map(value => this.widgetsForNestedFields(fields, value, fieldsMetaData));
    }
    // Fields nested within an object field will be paired with a single Map of values.
    return this.widgetsForNestedFields(fields, values, fieldsMetaData);
  };
  getSingleNested = (field, values, fieldsMetaData) => {
    if (List.isList(values)) {
      return values.map((value, idx) => this.getWidget(field, value, fieldsMetaData.get(field.get('name')), this.props, idx));
    }
    return this.getWidget(field, values, fieldsMetaData.get(field.get('name')), this.props);
  };

  /**
   * Use widgetFor as a mapping function for recursive widget retrieval
   */
  widgetsForNestedFields = (fields, values, fieldsMetaData) => {
    return fields.map(field => this.widgetFor(field.get('name'), fields, values, fieldsMetaData));
  };

  /**
   * This function exists entirely to expose nested widgets for object and list
   * fields to custom preview templates.
   *
   * TODO: see if widgetFor can now provide this functionality for preview templates
   */
  widgetsFor = name => {
    const {
      fields,
      entry,
      fieldsMetaData
    } = this.props;
    const field = fields.find(f => f.get('name') === name);
    const nestedFields = field && field.get('fields');
    const variableTypes = field && field.get('types');
    const value = entry.getIn(['data', field.get('name')]);
    const metadata = fieldsMetaData.get(field.get('name'), Map());

    // Variable Type lists
    if (List.isList(value) && variableTypes) {
      return value.map(val => {
        const valueType = variableTypes.find(t => t.get('name') === val.get('type'));
        const typeFields = valueType && valueType.get('fields');
        const widgets = typeFields && Map(typeFields.map((f, i) => [f.get('name'), ___EmotionJSX("div", {
          key: i
        }, this.getWidget(f, val, metadata.get(f.get('name')), this.props))]));
        return Map({
          data: val,
          widgets
        });
      });
    }

    // List widgets
    if (List.isList(value)) {
      return value.map(val => {
        const widgets = nestedFields && Map(nestedFields.map((f, i) => [f.get('name'), ___EmotionJSX("div", {
          key: i
        }, this.getWidget(f, val, metadata.get(f.get('name')), this.props))]));
        return Map({
          data: val,
          widgets
        });
      });
    }
    return Map({
      data: value,
      widgets: nestedFields && Map(nestedFields.map(f => [f.get('name'), this.getWidget(f, value, metadata.get(f.get('name')), this.props)]))
    });
  };

  /**
   * This function exists entirely to expose collections from outside of this entry
   *
   */
  getCollection = async (collectionName, slug) => {
    const {
      state
    } = this.props;
    const selectedCollection = state.collections.get(collectionName);
    if (typeof slug === 'undefined') {
      const entries = await getAllEntries(state, selectedCollection);
      return entries.map(entry => Map().set('data', entry.data));
    }
    const entry = await tryLoadEntry(state, selectedCollection, slug);
    return Map().set('data', entry.data);
  };
  render() {
    const {
      entry,
      collection,
      config
    } = this.props;
    if (!entry || !entry.get('data')) {
      return null;
    }
    const previewComponent = getPreviewTemplate(selectTemplateName(collection, entry.get('slug'))) || EditorPreview;
    this.inferFields();
    const visualEditing = collection.getIn(['editor', 'visualEditing'], false);

    // Only encode entry data if visual editing is enabled
    const previewEntry = visualEditing ? entry.set('data', encodeEntry(entry.get('data'), this.props.fields)) : entry;
    const previewProps = {
      ...this.props,
      entry: previewEntry,
      widgetFor: (name, fields, values = previewEntry.get('data'), fieldsMetaData) => this.widgetFor(name, fields, values, fieldsMetaData),
      widgetsFor: this.widgetsFor,
      getCollection: this.getCollection
    };
    const styleEls = getPreviewStyles().map((style, i) => {
      if (style.raw) {
        return ___EmotionJSX("style", {
          key: i
        }, style.value);
      }
      return ___EmotionJSX("link", {
        key: i,
        href: style.value,
        type: "text/css",
        rel: "stylesheet"
      });
    });
    if (!collection) {
      ___EmotionJSX(PreviewPaneFrame, {
        id: "preview-pane",
        head: styleEls
      });
    }

    // For local preview mirror (or legacy local_backend), render the real Hugo page via iframe
    try {
      const isMirrorPreview = !!(config && (config.local_preview_mirror || config.local_backend));
      if (isMirrorPreview) {
        const folder = (collection.get('folder') || '').toString();
        // section derived from folder, e.g., content/tech-stack -> tech-stack
        const section = folder.replace(/^\/?content\/?/i, '').replace(/^\/+|\/+$/g, '');
        const slug = (entry.get('slug') || '').toString().replace(/^\/+|\/+$/g, '');
        const needsSection = section && !slug.startsWith(`${section}/`);
        const path = needsSection ? `${section}/${slug}` : slug;
        const base = config && config.get && (config.get('display_url') || config.get('site_url')) || config && (config.display_url || config.site_url) || typeof window !== 'undefined' && window.location && window.location.origin || '';
        let previewUrl = `${base}/${path.replace(/^\/+|\/+$|\/\/+$/g, '')}/`;
        // Strip trailing '/index' or '/index/' from nested index.md URLs
        previewUrl = previewUrl.replace(/\/(index\/?)(?=$|\?)/i, '/');
        if (typeof window !== 'undefined' && window.console) {
          try {
            console.log('[local_preview_mirror preview] url:', {
              section,
              slug,
              path,
              previewUrl
            });
          } catch (_) {}
        }
        return ___EmotionJSX("div", {
          style: {
            height: '100%',
            display: 'flex',
            flexDirection: 'column'
          }
        }, ___EmotionJSX("div", {
          style: {
            padding: '6px 8px',
            borderBottom: '1px solid #e1e4e8',
            background: '#fafbfc',
            fontSize: 12
          }
        }, ___EmotionJSX("span", {
          style: {
            marginRight: 8,
            wordBreak: 'break-all'
          }
        }, previewUrl), ___EmotionJSX("a", {
          href: previewUrl,
          target: "_blank",
          rel: "noopener noreferrer",
          style: {
            textDecoration: 'none',
            color: '#0969da'
          }
        }, "Open in new tab")), ___EmotionJSX("div", {
          style: {
            flex: 1,
            minHeight: 0
          }
        }, ___EmotionJSX(ExternalPreviewIframe, {
          id: "hugo-external-preview-iframe",
          src: previewUrl,
          onError: () => window.alert('Preview failed to load. Is the Hugo server running?'),
          style: {
            width: '100%',
            height: '100%'
          }
        })));
      }
    } catch (e) {
      // fall back to default below
    }
    const initialContent = `
<!DOCTYPE html>
<html>
  <head><base target="_blank"/></head>
  <body><div></div></body>
</html>
`;
    return ___EmotionJSX(ErrorBoundary, {
      config: config
    }, ___EmotionJSX(PreviewPaneFrame, {
      id: "preview-pane",
      head: styleEls,
      initialContent: initialContent
    }, ___EmotionJSX(FrameContextConsumer, null, ({
      document,
      window
    }) => {
      return ___EmotionJSX(EditorPreviewContent, {
        previewComponent,
        previewProps: {
          ...previewProps,
          document,
          window
        },
        onFieldClick: this.props.onFieldClick
      });
    })));
  }
}
PreviewPane.propTypes = {
  collection: ImmutablePropTypes.map.isRequired,
  fields: ImmutablePropTypes.list.isRequired,
  entry: ImmutablePropTypes.map.isRequired,
  fieldsMetaData: ImmutablePropTypes.map.isRequired,
  getAsset: PropTypes.func.isRequired,
  onFieldClick: PropTypes.func
};
function mapStateToProps(state) {
  const isLoadingAsset = selectIsLoadingAsset(state.medias);
  return {
    isLoadingAsset,
    config: state.config,
    state
  };
}
function mapDispatchToProps(dispatch) {
  return {
    boundGetAsset: (collection, entry) => boundGetAsset(dispatch, collection, entry)
  };
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  return {
    ...stateProps,
    ...dispatchProps,
    ...ownProps,
    getAsset: dispatchProps.boundGetAsset(ownProps.collection, ownProps.entry)
  };
}
export default connect(mapStateToProps, mapDispatchToProps, mergeProps)(PreviewPane);