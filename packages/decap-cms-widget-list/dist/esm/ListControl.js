import _styled from "@emotion/styled/base";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { css, ClassNames } from '@emotion/react';
import { List, Map, fromJS } from 'immutable';
import partial from 'lodash/partial';
import isEmpty from 'lodash/isEmpty';
import uniqueId from 'lodash/uniqueId';
import { v4 as uuid } from 'uuid';
import DecapCmsWidgetObject from 'decap-cms-widget-object';
import { DndContext, MouseSensor, TouchSensor, closestCenter, useSensor, useSensors } from '@dnd-kit/core';
import { SortableContext, useSortable } from '@dnd-kit/sortable';
import { restrictToParentElement } from '@dnd-kit/modifiers';
import { CSS } from '@dnd-kit/utilities';
import { ListItemTopBar, ObjectWidgetTopBar, colors, lengths, FieldLabel } from 'decap-cms-ui-default';
import { stringTemplate, validations } from 'decap-cms-lib-widgets';
import { TYPES_KEY, getTypedFieldForValue, resolveFieldKeyType, getErrorMessageForTypedFieldAndValue } from './typedListHelpers';
import { jsx as ___EmotionJSX } from "@emotion/react";
const ObjectControl = DecapCmsWidgetObject.controlComponent;
const ListItem = /*#__PURE__*/_styled("div", {
  target: "e11zrb3c2",
  label: "ListItem"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const StyledListItemTopBar = /*#__PURE__*/_styled(ListItemTopBar, {
  target: "e11zrb3c1",
  label: "StyledListItemTopBar"
})(process.env.NODE_ENV === "production" ? {
  name: "d1a3aa",
  styles: "background-color:transparent;height:18px;margin:2px 0 4px;opacity:1;transition:color 0.15s,background 0.15s"
} : {
  name: "d1a3aa",
  styles: "background-color:transparent;height:18px;margin:2px 0 4px;opacity:1;transition:color 0.15s,background 0.15s/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const NestedObjectLabel = /*#__PURE__*/_styled("div", {
  target: "e11zrb3c0",
  label: "NestedObjectLabel"
})(process.env.NODE_ENV === "production" ? {
  name: "eivff4",
  styles: "display:none"
} : {
  name: "eivff4",
  styles: "display:none/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const styleStrings = {
  collapsedObjectControl: `
    display: none;
  `,
  objectWidgetTopBarContainer: `
    padding: ${lengths.objectWidgetTopBarContainerPadding};
  `,
  expandedTight: `
    padding: 0 !important;
    & [class*="ControlTopbar"] { display: none !important; }
    & [class*="ControlContainer"] { margin-top: 0 !important; padding: 0 !important; border: 0 !important; background: transparent !important; }
    & [class*="TextControl"] { margin-top: 0 !important; }
    & [class*="ObjectWidgetTopBar"] { display: none !important; }
    & > div { margin: 0 !important; padding: 0 !important; }
  `
};
const styles = {
  listControlItem: process.env.NODE_ENV === "production" ? {
    name: "16byfal-listControlItem",
    styles: "margin-top:6px;border-left:2px solid #dee2e6;padding-left:10px;background:transparent;&:first-of-type{margin-top:8px;}&:hover{background:rgba(0, 0, 0, 0.02);border-left-color:#0969da;};label:listControlItem;"
  } : {
    name: "16byfal-listControlItem",
    styles: "margin-top:6px;border-left:2px solid #dee2e6;padding-left:10px;background:transparent;&:first-of-type{margin-top:8px;}&:hover{background:rgba(0, 0, 0, 0.02);border-left-color:#0969da;};label:listControlItem;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  listControlItemCollapsed: process.env.NODE_ENV === "production" ? {
    name: "1gjco9g-listControlItemCollapsed",
    styles: "padding-bottom:0;label:listControlItemCollapsed;"
  } : {
    name: "1gjco9g-listControlItemCollapsed",
    styles: "padding-bottom:0;label:listControlItemCollapsed;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
function SortableList({
  items,
  children,
  onSortEnd,
  keys
}) {
  const activationConstraint = {
    distance: 4
  };
  const sensors = useSensors(useSensor(MouseSensor, {
    activationConstraint
  }), useSensor(TouchSensor, {
    activationConstraint
  }));
  function handleSortEnd({
    active,
    over
  }) {
    onSortEnd({
      oldIndex: keys.indexOf(active.id),
      newIndex: keys.indexOf(over.id)
    });
  }
  return ___EmotionJSX("div", null, ___EmotionJSX(DndContext, {
    modifiers: [restrictToParentElement],
    collisionDetection: closestCenter,
    sensors: sensors,
    onDragEnd: handleSortEnd
  }, ___EmotionJSX(SortableContext, {
    items: items
  }, children)));
}
function SortableListItem(props) {
  const {
    setNodeRef,
    transform,
    transition
  } = useSortable({
    id: props.id
  });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition
  };
  const {
    collapsed
  } = props;
  return ___EmotionJSX(ListItem, {
    sortable: true,
    ref: setNodeRef,
    style: style,
    css: [styles.listControlItem, collapsed && styles.listControlItemCollapsed, ";label:SortableListItem;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")]
  }, props.children);
}
function DragHandle({
  children,
  id
}) {
  const {
    attributes,
    listeners
  } = useSortable({
    id
  });
  return ___EmotionJSX("div", _extends({}, attributes, listeners), children);
}
const valueTypes = {
  SINGLE: 'SINGLE',
  MULTIPLE: 'MULTIPLE',
  MIXED: 'MIXED'
};
function handleSummary(summary, entry, label, item) {
  const data = stringTemplate.addFileTemplateFields(entry.get('path'), item.set('fields.label', label));
  return stringTemplate.compileStringTemplate(summary, null, '', data);
}
function validateItem(field, item) {
  if (!Map.isMap(item)) {
    console.warn(`'${field.get('name')}' field item value value should be a map but is a '${typeof item}'`);
    return false;
  }
  return true;
}
function LabelComponent({
  field,
  isActive,
  hasErrors,
  uniqueFieldId,
  isFieldOptional,
  t
}) {
  const label = `${field.get('label', field.get('name'))}`;
  return ___EmotionJSX(FieldLabel, {
    isActive: isActive,
    hasErrors: hasErrors,
    htmlFor: uniqueFieldId
  }, label, " ", `${isFieldOptional ? ` (${t('editor.editorControl.field.optional')})` : ''}`);
}
export default class ListControl extends React.Component {
  childRefs = {};
  rootRef = /*#__PURE__*/React.createRef();
  static propTypes = {
    metadata: ImmutablePropTypes.map,
    onChange: PropTypes.func.isRequired,
    onChangeObject: PropTypes.func.isRequired,
    onValidateObject: PropTypes.func.isRequired,
    validate: PropTypes.func.isRequired,
    value: ImmutablePropTypes.list,
    field: PropTypes.object,
    forID: PropTypes.string,
    controlRef: PropTypes.func,
    mediaPaths: ImmutablePropTypes.map.isRequired,
    getAsset: PropTypes.func.isRequired,
    onOpenMediaLibrary: PropTypes.func.isRequired,
    onAddAsset: PropTypes.func.isRequired,
    onRemoveInsertedMedia: PropTypes.func.isRequired,
    classNameWrapper: PropTypes.string.isRequired,
    setActiveStyle: PropTypes.func.isRequired,
    setInactiveStyle: PropTypes.func.isRequired,
    editorControl: PropTypes.elementType.isRequired,
    resolveWidget: PropTypes.func.isRequired,
    clearFieldErrors: PropTypes.func.isRequired,
    fieldsErrors: ImmutablePropTypes.map.isRequired,
    entry: ImmutablePropTypes.map.isRequired,
    t: PropTypes.func
  };
  static defaultProps = {
    value: List(),
    parentIds: []
  };
  constructor(props) {
    super(props);
    const {
      field,
      value
    } = props;
    const listCollapsed = field.get('collapsed', true);
    const itemsCollapsed = value && Array(value.size).fill(listCollapsed) || [];
    const keys = value && Array.from({
      length: value.size
    }, () => uuid()) || [];
    this.state = {
      listCollapsed,
      itemsCollapsed,
      value: this.valueToString(value),
      keys
    };
  }
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(ListControl.propTypes, this.props, 'prop', 'ListControl');
    document.addEventListener('mousedown', this.handleGlobalMouseDown, true);
  }
  componentWillUnmount() {
    document.removeEventListener('mousedown', this.handleGlobalMouseDown, true);
  }
  handleGlobalMouseDown = e => {
    // Collapse the list and all items when clicking outside of this widget
    const root = this.rootRef.current;
    if (!root) return;
    if (!root.contains(e.target)) {
      const size = this.props.value ? this.props.value.size : 0;
      this.setState({
        listCollapsed: true,
        itemsCollapsed: Array(size).fill(true)
      });
    }
  };
  valueToString = value => {
    let stringValue;
    if (List.isList(value) || Array.isArray(value)) {
      stringValue = value.join(',');
    } else {
      console.warn(`Expected List value to be an array but received '${value}' with type of '${typeof value}'. Please check the value provided to the '${this.props.field.get('name')}' field`);
      stringValue = String(value);
    }
    return stringValue.replace(/,([^\s]|$)/g, ', $1');
  };
  getValueType = () => {
    const {
      field
    } = this.props;
    if (field.get('fields')) {
      return valueTypes.MULTIPLE;
    } else if (field.get('field')) {
      return valueTypes.SINGLE;
    } else if (field.get(TYPES_KEY)) {
      return valueTypes.MIXED;
    } else {
      return null;
    }
  };
  uniqueFieldId = uniqueId(`${this.props.field.get('name')}-field-`);
  /**
   * Always update so that each nested widget has the option to update. This is
   * required because ControlHOC provides a default `shouldComponentUpdate`
   * which only updates if the value changes, but every widget must be allowed
   * to override this.
   */
  shouldComponentUpdate() {
    return true;
  }
  handleChange = e => {
    const {
      onChange
    } = this.props;
    const oldValue = this.state.value;
    const newValue = e.target.value.trim();
    const listValue = newValue ? newValue.split(',') : [];
    if (newValue.match(/,$/) && oldValue.match(/, $/)) {
      listValue.pop();
    }
    const parsedValue = this.valueToString(listValue);
    this.setState({
      value: parsedValue
    });
    onChange(List(listValue.map(val => val.trim())));
  };
  handleFocus = () => {
    this.props.setActiveStyle();
  };
  handleBlur = e => {
    const listValue = e.target.value.split(',').map(el => el.trim()).filter(el => el);
    this.setState({
      value: this.valueToString(listValue)
    });
    this.props.setInactiveStyle();
  };
  handleAdd = e => {
    e.preventDefault();
    const {
      field
    } = this.props;
    const parsedValue = this.getValueType() === valueTypes.SINGLE ? this.singleDefault() : fromJS(this.multipleDefault(field.get('fields')));
    this.addItem(parsedValue);
  };
  singleDefault = () => {
    return this.props.field.getIn(['field', 'default'], null);
  };
  multipleDefault = fields => {
    return this.getFieldsDefault(fields);
  };
  handleAddType = (type, typeKey) => {
    const parsedValue = fromJS(this.mixedDefault(typeKey, type));
    this.addItem(parsedValue);
  };
  mixedDefault = (typeKey, type) => {
    const selectedType = this.props.field.get(TYPES_KEY).find(f => f.get('name') === type);
    const fields = selectedType.get('fields') || [selectedType.get('field')];
    return this.getFieldsDefault(fields, {
      [typeKey]: type
    });
  };
  getFieldsDefault = (fields, initialValue = {}) => {
    return fields.reduce((acc, item) => {
      const subfields = item.get('field') || item.get('fields');
      const object = item.get('widget') == 'object';
      const name = item.get('name');
      const defaultValue = item.get('default', null);
      if (List.isList(subfields) && object) {
        const subDefaultValue = this.getFieldsDefault(subfields);
        !isEmpty(subDefaultValue) && (acc[name] = subDefaultValue);
        return acc;
      }
      if (Map.isMap(subfields) && object) {
        const subDefaultValue = this.getFieldsDefault([subfields]);
        !isEmpty(subDefaultValue) && (acc[name] = subDefaultValue);
        return acc;
      }
      if (defaultValue !== null) {
        acc[name] = defaultValue;
      }
      return acc;
    }, initialValue);
  };
  addItem = parsedValue => {
    const {
      value,
      onChange,
      field
    } = this.props;
    const addToTop = field.get('add_to_top', false);
    const itemKey = uuid();
    this.setState({
      itemsCollapsed: addToTop ? [false, ...this.state.itemsCollapsed] : [...this.state.itemsCollapsed, false],
      keys: addToTop ? [itemKey, ...this.state.keys] : [...this.state.keys, itemKey]
    });
    const listValue = value || List();
    if (addToTop) {
      onChange(listValue.unshift(parsedValue));
    } else {
      onChange(listValue.push(parsedValue));
    }
  };
  processControlRef = ref => {
    if (!ref) return;
    const {
      props: {
        validationKey: key
      }
    } = ref;
    this.childRefs[key] = ref;
    this.props.controlRef?.(this);
  };
  validate = () => {
    // First validate child widgets if this is a complex list
    const hasChildWidgets = this.getValueType() && Object.keys(this.childRefs).length > 0;
    if (hasChildWidgets) {
      Object.values(this.childRefs).forEach(widget => {
        widget?.validate?.();
      });
    } else {
      this.props.validate();
    }
    this.props.onValidateObject(this.props.forID, this.validateSize());
  };
  validateSize = () => {
    const {
      field,
      value,
      t
    } = this.props;
    const min = field.get('min');
    const max = field.get('max');
    const required = field.get('required', true);
    if (!required && !value?.size) {
      return [];
    }
    const error = validations.validateMinMax(t, field.get('label', field.get('name')), value, min, max);
    return error ? [error] : [];
  };

  /**
   * In case the `onChangeObject` function is frozen by a child widget implementation,
   * e.g. when debounced, always get the latest object value instead of using
   * `this.props.value` directly.
   */
  getObjectValue = idx => this.props.value.get(idx) || Map();
  handleChangeFor(index) {
    return (f, newValue, newMetadata) => {
      const {
        value,
        metadata,
        onChange,
        field
      } = this.props;
      const collectionName = field.get('name');
      const listFieldObjectWidget = field.getIn(['field', 'widget']) === 'object';
      const withNameKey = this.getValueType() !== valueTypes.SINGLE || this.getValueType() === valueTypes.SINGLE && listFieldObjectWidget;
      const newObjectValue = withNameKey ? this.getObjectValue(index).set(f.get('name'), newValue) : newValue;
      const parsedMetadata = {
        [collectionName]: Object.assign(metadata ? metadata.toJS() : {}, newMetadata || {})
      };
      onChange(value.set(index, newObjectValue), parsedMetadata);
    };
  }
  handleRemove = (index, event) => {
    event.preventDefault();
    const {
      itemsCollapsed
    } = this.state;
    const {
      value,
      metadata,
      onChange,
      field,
      clearFieldErrors,
      onValidateObject,
      forID,
      fieldsErrors
    } = this.props;
    const collectionName = field.get('name');
    const isSingleField = this.getValueType() === valueTypes.SINGLE;
    const metadataRemovePath = isSingleField ? value.get(index) : value.get(index).valueSeq();
    const parsedMetadata = metadata && !metadata.isEmpty() ? {
      [collectionName]: metadata.removeIn(metadataRemovePath)
    } : metadata;

    // Get the key of the item being removed
    const removedKey = this.state.keys[index];

    // Update state while preserving keys for remaining items
    const newKeys = [...this.state.keys];
    newKeys.splice(index, 1);
    itemsCollapsed.splice(index, 1);
    this.setState({
      itemsCollapsed: [...itemsCollapsed],
      keys: newKeys
    });

    // Clear the ref for the removed item
    delete this.childRefs[removedKey];
    const newValue = value.delete(index);

    // Clear errors for the removed item and its children
    if (fieldsErrors) {
      Object.entries(fieldsErrors.toJS()).forEach(([fieldId, errors]) => {
        if (errors.some(err => err.parentIds?.includes(removedKey))) {
          clearFieldErrors(fieldId);
        }
      });
    }

    // If list is empty, mark it as valid
    if (newValue.size === 0) {
      clearFieldErrors(forID);
      onValidateObject(forID, []);
    }

    // Update the value last to ensure all error states are cleared
    onChange(newValue, parsedMetadata);
  };
  handleItemCollapseToggle = (index, event) => {
    event.preventDefault();
    const {
      itemsCollapsed
    } = this.state;
    const newItemsCollapsed = itemsCollapsed.map((collapsed, itemIndex) => {
      if (index === itemIndex) {
        return !collapsed;
      }
      return collapsed;
    });
    this.setState({
      itemsCollapsed: newItemsCollapsed
    });
  };
  handleCollapseAllToggle = e => {
    e.preventDefault();
    const {
      value,
      field
    } = this.props;
    const {
      itemsCollapsed,
      listCollapsed
    } = this.state;
    const minimizeCollapsedItems = field.get('minimize_collapsed', false);
    const listCollapsedByDefault = field.get('collapsed', true);
    const allItemsCollapsed = itemsCollapsed.every(val => val === true);
    if (minimizeCollapsedItems) {
      let updatedItemsCollapsed = itemsCollapsed;
      // Only allow collapsing all items in this mode but not opening all at once
      if (!listCollapsed || !listCollapsedByDefault) {
        updatedItemsCollapsed = Array(value.size).fill(!listCollapsed);
      }
      this.setState({
        listCollapsed: !listCollapsed,
        itemsCollapsed: updatedItemsCollapsed
      });
    } else {
      this.setState({
        itemsCollapsed: Array(value.size).fill(!allItemsCollapsed)
      });
    }
  };
  objectLabel(item) {
    const {
      field,
      entry
    } = this.props;
    const valueType = this.getValueType();
    switch (valueType) {
      case valueTypes.MIXED:
        {
          if (!validateItem(field, item)) {
            return;
          }
          const itemType = getTypedFieldForValue(field, item);
          const label = itemType.get('label', itemType.get('name'));
          // each type can have its own summary, but default to the list summary if exists
          const summary = itemType.get('summary', field.get('summary'));
          const labelReturn = summary ? handleSummary(summary, entry, label, item) : label;
          return labelReturn;
        }
      case valueTypes.SINGLE:
        {
          const singleField = field.get('field');
          const label = singleField.get('label', singleField.get('name'));
          const summary = field.get('summary');
          const data = fromJS({
            [singleField.get('name')]: item
          });
          const labelReturn = summary ? handleSummary(summary, entry, label, data) : label;
          return labelReturn;
        }
      case valueTypes.MULTIPLE:
        {
          if (!validateItem(field, item)) {
            return;
          }
          const multiFields = field.get('fields');
          const labelField = multiFields && multiFields.first();
          const value = item.get(labelField.get('name'));
          const summary = field.get('summary');
          const labelReturn = summary ? handleSummary(summary, entry, value, item) : value;
          return (labelReturn || `No ${labelField.get('name')}`).toString();
        }
    }
    return '';
  }
  onSortEnd = ({
    oldIndex,
    newIndex
  }) => {
    const {
      value
    } = this.props;
    const {
      itemsCollapsed,
      keys
    } = this.state;

    // Update value
    const item = value.get(oldIndex);
    const newValue = value.delete(oldIndex).insert(newIndex, item);
    this.props.onChange(newValue);

    // Update collapsing
    const collapsed = itemsCollapsed[oldIndex];
    itemsCollapsed.splice(oldIndex, 1);
    const updatedItemsCollapsed = [...itemsCollapsed];
    updatedItemsCollapsed.splice(newIndex, 0, collapsed);

    // Move keys to maintain relationships
    const movedKey = keys[oldIndex];
    const updatedKeys = [...keys];
    updatedKeys.splice(oldIndex, 1);
    updatedKeys.splice(newIndex, 0, movedKey);
    this.setState({
      itemsCollapsed: updatedItemsCollapsed,
      keys: updatedKeys
    });
  };
  hasError = index => {
    const {
      fieldsErrors
    } = this.props;
    if (fieldsErrors && fieldsErrors.size > 0) {
      return Object.values(fieldsErrors.toJS()).some(arr => arr.some(err => err.parentIds && err.parentIds.includes(this.state.keys[index])));
    }
  };
  focus(path) {
    const [index, ...remainingPath] = path.split('.');
    if (this.state.listCollapsed || this.state.itemsCollapsed[index]) {
      const newItemsCollapsed = [...this.state.itemsCollapsed];
      newItemsCollapsed[index] = false;
      this.setState({
        listCollapsed: false,
        itemsCollapsed: newItemsCollapsed
      }, () => {
        const key = this.state.keys[index];
        const control = this.childRefs[key];
        if (control?.focus) {
          control.focus(remainingPath.join('.'));
        }
      });
    } else {
      const key = this.state.keys[index];
      const control = this.childRefs[key];
      if (control?.focus) {
        control.focus(remainingPath.join('.'));
      }
    }
  }

  // eslint-disable-next-line react/display-name
  renderItem = (item, index) => {
    const {
      classNameWrapper,
      editorControl,
      onValidateObject,
      metadata,
      clearFieldErrors,
      fieldsErrors,
      controlRef,
      resolveWidget,
      parentIds,
      forID,
      t
    } = this.props;
    const {
      itemsCollapsed,
      keys
    } = this.state;
    const collapsed = itemsCollapsed[index];
    const key = keys[index];
    let field = this.props.field;
    const hasError = this.hasError(index);
    const isVariableTypesList = this.getValueType() === valueTypes.MIXED;
    if (isVariableTypesList) {
      field = getTypedFieldForValue(field, item);
      if (!field) {
        return this.renderErroneousTypedItem(index, item);
      }
    }
    return ___EmotionJSX(SortableListItem, {
      css: [styles.listControlItem, collapsed && styles.listControlItemCollapsed, ";label:renderItem;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")],
      index: index,
      key: key,
      id: key,
      keys: keys
    }, isVariableTypesList && ___EmotionJSX(LabelComponent, {
      field: field,
      isActive: false,
      hasErrors: hasError,
      uniqueFieldId: this.uniqueFieldId,
      isFieldOptional: field.get('required') === false,
      t: t
    }), ___EmotionJSX(StyledListItemTopBar, {
      collapsed: collapsed,
      onCollapseToggle: partial(this.handleItemCollapseToggle, index),
      dragHandle: DragHandle,
      id: key,
      allowRemove: field.get('allow_remove', true),
      allowReorder: field.get('allow_reorder', true),
      onRemove: partial(this.handleRemove, index),
      label: this.objectLabel(item),
      "data-testid": `styled-list-item-top-bar-${key}`
    }), null, ___EmotionJSX(ClassNames, null, ({
      css,
      cx
    }) => ___EmotionJSX(ObjectControl, {
      classNameWrapper: cx(classNameWrapper, {
        [css`
                  ${styleStrings.collapsedObjectControl};
                `]: collapsed,
        [css`
                  ${styleStrings.expandedTight};
                `]: !collapsed
      }),
      value: item,
      field: field,
      onChangeObject: this.handleChangeFor(index),
      editorControl: editorControl,
      resolveWidget: resolveWidget,
      metadata: metadata,
      forList: true,
      onValidateObject: onValidateObject,
      clearFieldErrors: clearFieldErrors,
      fieldsErrors: fieldsErrors,
      ref: this.processControlRef,
      controlRef: controlRef,
      validationKey: key,
      collapsed: collapsed,
      "data-testid": `object-control-${key}`,
      hasError: hasError,
      parentIds: [...parentIds, forID, key]
    })));
  };
  renderErroneousTypedItem(index, item) {
    const field = this.props.field;
    const errorMessage = getErrorMessageForTypedFieldAndValue(field, item);
    const key = `item-${index}`;
    return ___EmotionJSX(SortableListItem, {
      css: [styles.listControlItem, styles.listControlItemCollapsed, ";label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXN0Q29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4dkJRIiwiZmlsZSI6Ii4uLy4uL3NyYy9MaXN0Q29udHJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcywgQ2xhc3NOYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IExpc3QsIE1hcCwgZnJvbUpTIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCBwYXJ0aWFsIGZyb20gJ2xvZGFzaC9wYXJ0aWFsJztcbmltcG9ydCBpc0VtcHR5IGZyb20gJ2xvZGFzaC9pc0VtcHR5JztcbmltcG9ydCB1bmlxdWVJZCBmcm9tICdsb2Rhc2gvdW5pcXVlSWQnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IERlY2FwQ21zV2lkZ2V0T2JqZWN0IGZyb20gJ2RlY2FwLWNtcy13aWRnZXQtb2JqZWN0JztcbmltcG9ydCB7XG4gIERuZENvbnRleHQsXG4gIE1vdXNlU2Vuc29yLFxuICBUb3VjaFNlbnNvcixcbiAgY2xvc2VzdENlbnRlcixcbiAgdXNlU2Vuc29yLFxuICB1c2VTZW5zb3JzLFxufSBmcm9tICdAZG5kLWtpdC9jb3JlJztcbmltcG9ydCB7IFNvcnRhYmxlQ29udGV4dCwgdXNlU29ydGFibGUgfSBmcm9tICdAZG5kLWtpdC9zb3J0YWJsZSc7XG5pbXBvcnQgeyByZXN0cmljdFRvUGFyZW50RWxlbWVudCB9IGZyb20gJ0BkbmQta2l0L21vZGlmaWVycyc7XG5pbXBvcnQgeyBDU1MgfSBmcm9tICdAZG5kLWtpdC91dGlsaXRpZXMnO1xuaW1wb3J0IHtcbiAgTGlzdEl0ZW1Ub3BCYXIsXG4gIE9iamVjdFdpZGdldFRvcEJhcixcbiAgY29sb3JzLFxuICBsZW5ndGhzLFxuICBGaWVsZExhYmVsLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzdHJpbmdUZW1wbGF0ZSwgdmFsaWRhdGlvbnMgfSBmcm9tICdkZWNhcC1jbXMtbGliLXdpZGdldHMnO1xuXG5pbXBvcnQge1xuICBUWVBFU19LRVksXG4gIGdldFR5cGVkRmllbGRGb3JWYWx1ZSxcbiAgcmVzb2x2ZUZpZWxkS2V5VHlwZSxcbiAgZ2V0RXJyb3JNZXNzYWdlRm9yVHlwZWRGaWVsZEFuZFZhbHVlLFxufSBmcm9tICcuL3R5cGVkTGlzdEhlbHBlcnMnO1xuXG5jb25zdCBPYmplY3RDb250cm9sID0gRGVjYXBDbXNXaWRnZXRPYmplY3QuY29udHJvbENvbXBvbmVudDtcblxuY29uc3QgTGlzdEl0ZW0gPSBzdHlsZWQuZGl2KCk7XG5cbmNvbnN0IFN0eWxlZExpc3RJdGVtVG9wQmFyID0gc3R5bGVkKExpc3RJdGVtVG9wQmFyKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGhlaWdodDogMThweDtcbiAgbWFyZ2luOiAycHggMCA0cHg7XG4gIG9wYWNpdHk6IDE7XG4gIHRyYW5zaXRpb246IGNvbG9yIDAuMTVzLCBiYWNrZ3JvdW5kIDAuMTVzO1xuYDtcblxuY29uc3QgTmVzdGVkT2JqZWN0TGFiZWwgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBub25lO1xuYDtcblxuY29uc3Qgc3R5bGVTdHJpbmdzID0ge1xuICBjb2xsYXBzZWRPYmplY3RDb250cm9sOiBgXG4gICAgZGlzcGxheTogbm9uZTtcbiAgYCxcbiAgb2JqZWN0V2lkZ2V0VG9wQmFyQ29udGFpbmVyOiBgXG4gICAgcGFkZGluZzogJHtsZW5ndGhzLm9iamVjdFdpZGdldFRvcEJhckNvbnRhaW5lclBhZGRpbmd9O1xuICBgLFxuICBleHBhbmRlZFRpZ2h0OiBgXG4gICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xuICAgICYgW2NsYXNzKj1cIkNvbnRyb2xUb3BiYXJcIl0geyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cbiAgICAmIFtjbGFzcyo9XCJDb250cm9sQ29udGFpbmVyXCJdIHsgbWFyZ2luLXRvcDogMCAhaW1wb3J0YW50OyBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7IGJvcmRlcjogMCAhaW1wb3J0YW50OyBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50OyB9XG4gICAgJiBbY2xhc3MqPVwiVGV4dENvbnRyb2xcIl0geyBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7IH1cbiAgICAmIFtjbGFzcyo9XCJPYmplY3RXaWRnZXRUb3BCYXJcIl0geyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH1cbiAgICAmID4gZGl2IHsgbWFyZ2luOiAwICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDAgIWltcG9ydGFudDsgfVxuICBgLFxufTtcblxuY29uc3Qgc3R5bGVzID0ge1xuICBsaXN0Q29udHJvbEl0ZW06IGNzc2BcbiAgICBtYXJnaW4tdG9wOiA2cHg7XG4gICAgYm9yZGVyLWxlZnQ6IDJweCBzb2xpZCAjZGVlMmU2O1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcblxuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICBtYXJnaW4tdG9wOiA4cHg7XG4gICAgfVxuXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuMDIpO1xuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6ICMwOTY5ZGE7XG4gICAgfVxuICBgLFxuICBsaXN0Q29udHJvbEl0ZW1Db2xsYXBzZWQ6IGNzc2BcbiAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgYCxcbn07XG5cbmZ1bmN0aW9uIFNvcnRhYmxlTGlzdCh7IGl0ZW1zLCBjaGlsZHJlbiwgb25Tb3J0RW5kLCBrZXlzIH0pIHtcbiAgY29uc3QgYWN0aXZhdGlvbkNvbnN0cmFpbnQgPSB7IGRpc3RhbmNlOiA0IH07XG4gIGNvbnN0IHNlbnNvcnMgPSB1c2VTZW5zb3JzKFxuICAgIHVzZVNlbnNvcihNb3VzZVNlbnNvciwgeyBhY3RpdmF0aW9uQ29uc3RyYWludCB9KSxcbiAgICB1c2VTZW5zb3IoVG91Y2hTZW5zb3IsIHsgYWN0aXZhdGlvbkNvbnN0cmFpbnQgfSksXG4gICk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlU29ydEVuZCh7IGFjdGl2ZSwgb3ZlciB9KSB7XG4gICAgb25Tb3J0RW5kKHtcbiAgICAgIG9sZEluZGV4OiBrZXlzLmluZGV4T2YoYWN0aXZlLmlkKSxcbiAgICAgIG5ld0luZGV4OiBrZXlzLmluZGV4T2Yob3Zlci5pZCksXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8RG5kQ29udGV4dFxuICAgICAgICBtb2RpZmllcnM9e1tyZXN0cmljdFRvUGFyZW50RWxlbWVudF19XG4gICAgICAgIGNvbGxpc2lvbkRldGVjdGlvbj17Y2xvc2VzdENlbnRlcn1cbiAgICAgICAgc2Vuc29ycz17c2Vuc29yc31cbiAgICAgICAgb25EcmFnRW5kPXtoYW5kbGVTb3J0RW5kfVxuICAgICAgPlxuICAgICAgICA8U29ydGFibGVDb250ZXh0IGl0ZW1zPXtpdGVtc30+e2NoaWxkcmVufTwvU29ydGFibGVDb250ZXh0PlxuICAgICAgPC9EbmRDb250ZXh0PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5mdW5jdGlvbiBTb3J0YWJsZUxpc3RJdGVtKHByb3BzKSB7XG4gIGNvbnN0IHsgc2V0Tm9kZVJlZiwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uIH0gPSB1c2VTb3J0YWJsZSh7XG4gICAgaWQ6IHByb3BzLmlkLFxuICB9KTtcblxuICBjb25zdCBzdHlsZSA9IHtcbiAgICB0cmFuc2Zvcm06IENTUy5UcmFuc2Zvcm0udG9TdHJpbmcodHJhbnNmb3JtKSxcbiAgICB0cmFuc2l0aW9uLFxuICB9O1xuXG4gIGNvbnN0IHsgY29sbGFwc2VkIH0gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxMaXN0SXRlbVxuICAgICAgc29ydGFibGVcbiAgICAgIHJlZj17c2V0Tm9kZVJlZn1cbiAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgIGNzcz17W3N0eWxlcy5saXN0Q29udHJvbEl0ZW0sIGNvbGxhcHNlZCAmJiBzdHlsZXMubGlzdENvbnRyb2xJdGVtQ29sbGFwc2VkXX1cbiAgICA+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9MaXN0SXRlbT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gRHJhZ0hhbmRsZSh7IGNoaWxkcmVuLCBpZCB9KSB7XG4gIGNvbnN0IHsgYXR0cmlidXRlcywgbGlzdGVuZXJzIH0gPSB1c2VTb3J0YWJsZSh7XG4gICAgaWQsXG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiB7Li4uYXR0cmlidXRlc30gey4uLmxpc3RlbmVyc30+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmNvbnN0IHZhbHVlVHlwZXMgPSB7XG4gIFNJTkdMRTogJ1NJTkdMRScsXG4gIE1VTFRJUExFOiAnTVVMVElQTEUnLFxuICBNSVhFRDogJ01JWEVEJyxcbn07XG5cbmZ1bmN0aW9uIGhhbmRsZVN1bW1hcnkoc3VtbWFyeSwgZW50cnksIGxhYmVsLCBpdGVtKSB7XG4gIGNvbnN0IGRhdGEgPSBzdHJpbmdUZW1wbGF0ZS5hZGRGaWxlVGVtcGxhdGVGaWVsZHMoXG4gICAgZW50cnkuZ2V0KCdwYXRoJyksXG4gICAgaXRlbS5zZXQoJ2ZpZWxkcy5sYWJlbCcsIGxhYmVsKSxcbiAgKTtcbiAgcmV0dXJuIHN0cmluZ1RlbXBsYXRlLmNvbXBpbGVTdHJpbmdUZW1wbGF0ZShzdW1tYXJ5LCBudWxsLCAnJywgZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSXRlbShmaWVsZCwgaXRlbSkge1xuICBpZiAoIU1hcC5pc01hcChpdGVtKSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGAnJHtmaWVsZC5nZXQoJ25hbWUnKX0nIGZpZWxkIGl0ZW0gdmFsdWUgdmFsdWUgc2hvdWxkIGJlIGEgbWFwIGJ1dCBpcyBhICcke3R5cGVvZiBpdGVtfSdgLFxuICAgICk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBMYWJlbENvbXBvbmVudCh7IGZpZWxkLCBpc0FjdGl2ZSwgaGFzRXJyb3JzLCB1bmlxdWVGaWVsZElkLCBpc0ZpZWxkT3B0aW9uYWwsIHQgfSkge1xuICBjb25zdCBsYWJlbCA9IGAke2ZpZWxkLmdldCgnbGFiZWwnLCBmaWVsZC5nZXQoJ25hbWUnKSl9YDtcbiAgcmV0dXJuIChcbiAgICA8RmllbGRMYWJlbCBpc0FjdGl2ZT17aXNBY3RpdmV9IGhhc0Vycm9ycz17aGFzRXJyb3JzfSBodG1sRm9yPXt1bmlxdWVGaWVsZElkfT5cbiAgICAgIHtsYWJlbH0ge2Ake2lzRmllbGRPcHRpb25hbCA/IGAgKCR7dCgnZWRpdG9yLmVkaXRvckNvbnRyb2wuZmllbGQub3B0aW9uYWwnKX0pYCA6ICcnfWB9XG4gICAgPC9GaWVsZExhYmVsPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXN0Q29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNoaWxkUmVmcyA9IHt9O1xuICByb290UmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBtZXRhZGF0YTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNoYW5nZU9iamVjdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblZhbGlkYXRlT2JqZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHZhbHVlOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBmb3JJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250cm9sUmVmOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBtZWRpYVBhdGhzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25PcGVuTWVkaWFMaWJyYXJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQWRkQXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25SZW1vdmVJbnNlcnRlZE1lZGlhOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNsYXNzTmFtZVdyYXBwZXI6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICBzZXRBY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBzZXRJbmFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGVkaXRvckNvbnRyb2w6IFByb3BUeXBlcy5lbGVtZW50VHlwZS5pc1JlcXVpcmVkLFxuICAgIHJlc29sdmVXaWRnZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xlYXJGaWVsZEVycm9yczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZHNFcnJvcnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBlbnRyeTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLFxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgdmFsdWU6IExpc3QoKSxcbiAgICBwYXJlbnRJZHM6IFtdLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IHsgZmllbGQsIHZhbHVlIH0gPSBwcm9wcztcbiAgICBjb25zdCBsaXN0Q29sbGFwc2VkID0gZmllbGQuZ2V0KCdjb2xsYXBzZWQnLCB0cnVlKTtcbiAgICBjb25zdCBpdGVtc0NvbGxhcHNlZCA9ICh2YWx1ZSAmJiBBcnJheSh2YWx1ZS5zaXplKS5maWxsKGxpc3RDb2xsYXBzZWQpKSB8fCBbXTtcbiAgICBjb25zdCBrZXlzID0gKHZhbHVlICYmIEFycmF5LmZyb20oeyBsZW5ndGg6IHZhbHVlLnNpemUgfSwgKCkgPT4gdXVpZCgpKSkgfHwgW107XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbGlzdENvbGxhcHNlZCxcbiAgICAgIGl0ZW1zQ29sbGFwc2VkLFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWVUb1N0cmluZyh2YWx1ZSksXG4gICAgICBrZXlzLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoTGlzdENvbnRyb2wucHJvcFR5cGVzLCB0aGlzLnByb3BzLCAncHJvcCcsICdMaXN0Q29udHJvbCcpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlR2xvYmFsTW91c2VEb3duLCB0cnVlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlR2xvYmFsTW91c2VEb3duLCB0cnVlKTtcbiAgfVxuXG4gIGhhbmRsZUdsb2JhbE1vdXNlRG93biA9IGUgPT4ge1xuICAgIC8vIENvbGxhcHNlIHRoZSBsaXN0IGFuZCBhbGwgaXRlbXMgd2hlbiBjbGlja2luZyBvdXRzaWRlIG9mIHRoaXMgd2lkZ2V0XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMucm9vdFJlZi5jdXJyZW50O1xuICAgIGlmICghcm9vdCkgcmV0dXJuO1xuICAgIGlmICghcm9vdC5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLnByb3BzLnZhbHVlID8gdGhpcy5wcm9wcy52YWx1ZS5zaXplIDogMDtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsaXN0Q29sbGFwc2VkOiB0cnVlLFxuICAgICAgICBpdGVtc0NvbGxhcHNlZDogQXJyYXkoc2l6ZSkuZmlsbCh0cnVlKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YWx1ZVRvU3RyaW5nID0gdmFsdWUgPT4ge1xuICAgIGxldCBzdHJpbmdWYWx1ZTtcbiAgICBpZiAoTGlzdC5pc0xpc3QodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBzdHJpbmdWYWx1ZSA9IHZhbHVlLmpvaW4oJywnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgRXhwZWN0ZWQgTGlzdCB2YWx1ZSB0byBiZSBhbiBhcnJheSBidXQgcmVjZWl2ZWQgJyR7dmFsdWV9JyB3aXRoIHR5cGUgb2YgJyR7dHlwZW9mIHZhbHVlfScuIFBsZWFzZSBjaGVjayB0aGUgdmFsdWUgcHJvdmlkZWQgdG8gdGhlICcke3RoaXMucHJvcHMuZmllbGQuZ2V0KFxuICAgICAgICAgICduYW1lJyxcbiAgICAgICAgKX0nIGZpZWxkYCxcbiAgICAgICk7XG4gICAgICBzdHJpbmdWYWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdWYWx1ZS5yZXBsYWNlKC8sKFteXFxzXXwkKS9nLCAnLCAkMScpO1xuICB9O1xuXG4gIGdldFZhbHVlVHlwZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChmaWVsZC5nZXQoJ2ZpZWxkcycpKSB7XG4gICAgICByZXR1cm4gdmFsdWVUeXBlcy5NVUxUSVBMRTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkLmdldCgnZmllbGQnKSkge1xuICAgICAgcmV0dXJuIHZhbHVlVHlwZXMuU0lOR0xFO1xuICAgIH0gZWxzZSBpZiAoZmllbGQuZ2V0KFRZUEVTX0tFWSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZVR5cGVzLk1JWEVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgdW5pcXVlRmllbGRJZCA9IHVuaXF1ZUlkKGAke3RoaXMucHJvcHMuZmllbGQuZ2V0KCduYW1lJyl9LWZpZWxkLWApO1xuICAvKipcbiAgICogQWx3YXlzIHVwZGF0ZSBzbyB0aGF0IGVhY2ggbmVzdGVkIHdpZGdldCBoYXMgdGhlIG9wdGlvbiB0byB1cGRhdGUuIFRoaXMgaXNcbiAgICogcmVxdWlyZWQgYmVjYXVzZSBDb250cm9sSE9DIHByb3ZpZGVzIGEgZGVmYXVsdCBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYFxuICAgKiB3aGljaCBvbmx5IHVwZGF0ZXMgaWYgdGhlIHZhbHVlIGNoYW5nZXMsIGJ1dCBldmVyeSB3aWRnZXQgbXVzdCBiZSBhbGxvd2VkXG4gICAqIHRvIG92ZXJyaWRlIHRoaXMuXG4gICAqL1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UgPSBlID0+IHtcbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlLnRyaW0oKTtcbiAgICBjb25zdCBsaXN0VmFsdWUgPSBuZXdWYWx1ZSA/IG5ld1ZhbHVlLnNwbGl0KCcsJykgOiBbXTtcbiAgICBpZiAobmV3VmFsdWUubWF0Y2goLywkLykgJiYgb2xkVmFsdWUubWF0Y2goLywgJC8pKSB7XG4gICAgICBsaXN0VmFsdWUucG9wKCk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPSB0aGlzLnZhbHVlVG9TdHJpbmcobGlzdFZhbHVlKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHBhcnNlZFZhbHVlIH0pO1xuICAgIG9uQ2hhbmdlKExpc3QobGlzdFZhbHVlLm1hcCh2YWwgPT4gdmFsLnRyaW0oKSkpKTtcbiAgfTtcblxuICBoYW5kbGVGb2N1cyA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLnNldEFjdGl2ZVN0eWxlKCk7XG4gIH07XG5cbiAgaGFuZGxlQmx1ciA9IGUgPT4ge1xuICAgIGNvbnN0IGxpc3RWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLm1hcChlbCA9PiBlbC50cmltKCkpXG4gICAgICAuZmlsdGVyKGVsID0+IGVsKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmFsdWU6IHRoaXMudmFsdWVUb1N0cmluZyhsaXN0VmFsdWUpIH0pO1xuICAgIHRoaXMucHJvcHMuc2V0SW5hY3RpdmVTdHlsZSgpO1xuICB9O1xuXG4gIGhhbmRsZUFkZCA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHBhcnNlZFZhbHVlID1cbiAgICAgIHRoaXMuZ2V0VmFsdWVUeXBlKCkgPT09IHZhbHVlVHlwZXMuU0lOR0xFXG4gICAgICAgID8gdGhpcy5zaW5nbGVEZWZhdWx0KClcbiAgICAgICAgOiBmcm9tSlModGhpcy5tdWx0aXBsZURlZmF1bHQoZmllbGQuZ2V0KCdmaWVsZHMnKSkpO1xuICAgIHRoaXMuYWRkSXRlbShwYXJzZWRWYWx1ZSk7XG4gIH07XG5cbiAgc2luZ2xlRGVmYXVsdCA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5maWVsZC5nZXRJbihbJ2ZpZWxkJywgJ2RlZmF1bHQnXSwgbnVsbCk7XG4gIH07XG5cbiAgbXVsdGlwbGVEZWZhdWx0ID0gZmllbGRzID0+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KGZpZWxkcyk7XG4gIH07XG5cbiAgaGFuZGxlQWRkVHlwZSA9ICh0eXBlLCB0eXBlS2V5KSA9PiB7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPSBmcm9tSlModGhpcy5taXhlZERlZmF1bHQodHlwZUtleSwgdHlwZSkpO1xuICAgIHRoaXMuYWRkSXRlbShwYXJzZWRWYWx1ZSk7XG4gIH07XG5cbiAgbWl4ZWREZWZhdWx0ID0gKHR5cGVLZXksIHR5cGUpID0+IHtcbiAgICBjb25zdCBzZWxlY3RlZFR5cGUgPSB0aGlzLnByb3BzLmZpZWxkLmdldChUWVBFU19LRVkpLmZpbmQoZiA9PiBmLmdldCgnbmFtZScpID09PSB0eXBlKTtcbiAgICBjb25zdCBmaWVsZHMgPSBzZWxlY3RlZFR5cGUuZ2V0KCdmaWVsZHMnKSB8fCBbc2VsZWN0ZWRUeXBlLmdldCgnZmllbGQnKV07XG5cbiAgICByZXR1cm4gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KGZpZWxkcywgeyBbdHlwZUtleV06IHR5cGUgfSk7XG4gIH07XG5cbiAgZ2V0RmllbGRzRGVmYXVsdCA9IChmaWVsZHMsIGluaXRpYWxWYWx1ZSA9IHt9KSA9PiB7XG4gICAgcmV0dXJuIGZpZWxkcy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgICAgY29uc3Qgc3ViZmllbGRzID0gaXRlbS5nZXQoJ2ZpZWxkJykgfHwgaXRlbS5nZXQoJ2ZpZWxkcycpO1xuICAgICAgY29uc3Qgb2JqZWN0ID0gaXRlbS5nZXQoJ3dpZGdldCcpID09ICdvYmplY3QnO1xuICAgICAgY29uc3QgbmFtZSA9IGl0ZW0uZ2V0KCduYW1lJyk7XG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBpdGVtLmdldCgnZGVmYXVsdCcsIG51bGwpO1xuXG4gICAgICBpZiAoTGlzdC5pc0xpc3Qoc3ViZmllbGRzKSAmJiBvYmplY3QpIHtcbiAgICAgICAgY29uc3Qgc3ViRGVmYXVsdFZhbHVlID0gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KHN1YmZpZWxkcyk7XG4gICAgICAgICFpc0VtcHR5KHN1YkRlZmF1bHRWYWx1ZSkgJiYgKGFjY1tuYW1lXSA9IHN1YkRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIGlmIChNYXAuaXNNYXAoc3ViZmllbGRzKSAmJiBvYmplY3QpIHtcbiAgICAgICAgY29uc3Qgc3ViRGVmYXVsdFZhbHVlID0gdGhpcy5nZXRGaWVsZHNEZWZhdWx0KFtzdWJmaWVsZHNdKTtcbiAgICAgICAgIWlzRW1wdHkoc3ViRGVmYXVsdFZhbHVlKSAmJiAoYWNjW25hbWVdID0gc3ViRGVmYXVsdFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBhY2NbbmFtZV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgaW5pdGlhbFZhbHVlKTtcbiAgfTtcblxuICBhZGRJdGVtID0gcGFyc2VkVmFsdWUgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUsIG9uQ2hhbmdlLCBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBhZGRUb1RvcCA9IGZpZWxkLmdldCgnYWRkX3RvX3RvcCcsIGZhbHNlKTtcblxuICAgIGNvbnN0IGl0ZW1LZXkgPSB1dWlkKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpdGVtc0NvbGxhcHNlZDogYWRkVG9Ub3BcbiAgICAgICAgPyBbZmFsc2UsIC4uLnRoaXMuc3RhdGUuaXRlbXNDb2xsYXBzZWRdXG4gICAgICAgIDogWy4uLnRoaXMuc3RhdGUuaXRlbXNDb2xsYXBzZWQsIGZhbHNlXSxcbiAgICAgIGtleXM6IGFkZFRvVG9wID8gW2l0ZW1LZXksIC4uLnRoaXMuc3RhdGUua2V5c10gOiBbLi4udGhpcy5zdGF0ZS5rZXlzLCBpdGVtS2V5XSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGxpc3RWYWx1ZSA9IHZhbHVlIHx8IExpc3QoKTtcbiAgICBpZiAoYWRkVG9Ub3ApIHtcbiAgICAgIG9uQ2hhbmdlKGxpc3RWYWx1ZS51bnNoaWZ0KHBhcnNlZFZhbHVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uQ2hhbmdlKGxpc3RWYWx1ZS5wdXNoKHBhcnNlZFZhbHVlKSk7XG4gICAgfVxuICB9O1xuXG4gIHByb2Nlc3NDb250cm9sUmVmID0gcmVmID0+IHtcbiAgICBpZiAoIXJlZikgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHByb3BzOiB7IHZhbGlkYXRpb25LZXk6IGtleSB9LFxuICAgIH0gPSByZWY7XG4gICAgdGhpcy5jaGlsZFJlZnNba2V5XSA9IHJlZjtcbiAgICB0aGlzLnByb3BzLmNvbnRyb2xSZWY/Lih0aGlzKTtcbiAgfTtcblxuICB2YWxpZGF0ZSA9ICgpID0+IHtcbiAgICAvLyBGaXJzdCB2YWxpZGF0ZSBjaGlsZCB3aWRnZXRzIGlmIHRoaXMgaXMgYSBjb21wbGV4IGxpc3RcbiAgICBjb25zdCBoYXNDaGlsZFdpZGdldHMgPSB0aGlzLmdldFZhbHVlVHlwZSgpICYmIE9iamVjdC5rZXlzKHRoaXMuY2hpbGRSZWZzKS5sZW5ndGggPiAwO1xuICAgIGlmIChoYXNDaGlsZFdpZGdldHMpIHtcbiAgICAgIE9iamVjdC52YWx1ZXModGhpcy5jaGlsZFJlZnMpLmZvckVhY2god2lkZ2V0ID0+IHtcbiAgICAgICAgd2lkZ2V0Py52YWxpZGF0ZT8uKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcm9wcy52YWxpZGF0ZSgpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLm9uVmFsaWRhdGVPYmplY3QodGhpcy5wcm9wcy5mb3JJRCwgdGhpcy52YWxpZGF0ZVNpemUoKSk7XG4gIH07XG5cbiAgdmFsaWRhdGVTaXplID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZmllbGQsIHZhbHVlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG1pbiA9IGZpZWxkLmdldCgnbWluJyk7XG4gICAgY29uc3QgbWF4ID0gZmllbGQuZ2V0KCdtYXgnKTtcbiAgICBjb25zdCByZXF1aXJlZCA9IGZpZWxkLmdldCgncmVxdWlyZWQnLCB0cnVlKTtcblxuICAgIGlmICghcmVxdWlyZWQgJiYgIXZhbHVlPy5zaXplKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3IgPSB2YWxpZGF0aW9ucy52YWxpZGF0ZU1pbk1heChcbiAgICAgIHQsXG4gICAgICBmaWVsZC5nZXQoJ2xhYmVsJywgZmllbGQuZ2V0KCduYW1lJykpLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXgsXG4gICAgKTtcblxuICAgIHJldHVybiBlcnJvciA/IFtlcnJvcl0gOiBbXTtcbiAgfTtcblxuICAvKipcbiAgICogSW4gY2FzZSB0aGUgYG9uQ2hhbmdlT2JqZWN0YCBmdW5jdGlvbiBpcyBmcm96ZW4gYnkgYSBjaGlsZCB3aWRnZXQgaW1wbGVtZW50YXRpb24sXG4gICAqIGUuZy4gd2hlbiBkZWJvdW5jZWQsIGFsd2F5cyBnZXQgdGhlIGxhdGVzdCBvYmplY3QgdmFsdWUgaW5zdGVhZCBvZiB1c2luZ1xuICAgKiBgdGhpcy5wcm9wcy52YWx1ZWAgZGlyZWN0bHkuXG4gICAqL1xuICBnZXRPYmplY3RWYWx1ZSA9IGlkeCA9PiB0aGlzLnByb3BzLnZhbHVlLmdldChpZHgpIHx8IE1hcCgpO1xuXG4gIGhhbmRsZUNoYW5nZUZvcihpbmRleCkge1xuICAgIHJldHVybiAoZiwgbmV3VmFsdWUsIG5ld01ldGFkYXRhKSA9PiB7XG4gICAgICBjb25zdCB7IHZhbHVlLCBtZXRhZGF0YSwgb25DaGFuZ2UsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSBmaWVsZC5nZXQoJ25hbWUnKTtcbiAgICAgIGNvbnN0IGxpc3RGaWVsZE9iamVjdFdpZGdldCA9IGZpZWxkLmdldEluKFsnZmllbGQnLCAnd2lkZ2V0J10pID09PSAnb2JqZWN0JztcbiAgICAgIGNvbnN0IHdpdGhOYW1lS2V5ID1cbiAgICAgICAgdGhpcy5nZXRWYWx1ZVR5cGUoKSAhPT0gdmFsdWVUeXBlcy5TSU5HTEUgfHxcbiAgICAgICAgKHRoaXMuZ2V0VmFsdWVUeXBlKCkgPT09IHZhbHVlVHlwZXMuU0lOR0xFICYmIGxpc3RGaWVsZE9iamVjdFdpZGdldCk7XG4gICAgICBjb25zdCBuZXdPYmplY3RWYWx1ZSA9IHdpdGhOYW1lS2V5XG4gICAgICAgID8gdGhpcy5nZXRPYmplY3RWYWx1ZShpbmRleCkuc2V0KGYuZ2V0KCduYW1lJyksIG5ld1ZhbHVlKVxuICAgICAgICA6IG5ld1ZhbHVlO1xuICAgICAgY29uc3QgcGFyc2VkTWV0YWRhdGEgPSB7XG4gICAgICAgIFtjb2xsZWN0aW9uTmFtZV06IE9iamVjdC5hc3NpZ24obWV0YWRhdGEgPyBtZXRhZGF0YS50b0pTKCkgOiB7fSwgbmV3TWV0YWRhdGEgfHwge30pLFxuICAgICAgfTtcbiAgICAgIG9uQ2hhbmdlKHZhbHVlLnNldChpbmRleCwgbmV3T2JqZWN0VmFsdWUpLCBwYXJzZWRNZXRhZGF0YSk7XG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZSA9IChpbmRleCwgZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgaXRlbXNDb2xsYXBzZWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWUsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIG9uQ2hhbmdlLFxuICAgICAgZmllbGQsXG4gICAgICBjbGVhckZpZWxkRXJyb3JzLFxuICAgICAgb25WYWxpZGF0ZU9iamVjdCxcbiAgICAgIGZvcklELFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSBmaWVsZC5nZXQoJ25hbWUnKTtcbiAgICBjb25zdCBpc1NpbmdsZUZpZWxkID0gdGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5TSU5HTEU7XG5cbiAgICBjb25zdCBtZXRhZGF0YVJlbW92ZVBhdGggPSBpc1NpbmdsZUZpZWxkID8gdmFsdWUuZ2V0KGluZGV4KSA6IHZhbHVlLmdldChpbmRleCkudmFsdWVTZXEoKTtcbiAgICBjb25zdCBwYXJzZWRNZXRhZGF0YSA9XG4gICAgICBtZXRhZGF0YSAmJiAhbWV0YWRhdGEuaXNFbXB0eSgpXG4gICAgICAgID8geyBbY29sbGVjdGlvbk5hbWVdOiBtZXRhZGF0YS5yZW1vdmVJbihtZXRhZGF0YVJlbW92ZVBhdGgpIH1cbiAgICAgICAgOiBtZXRhZGF0YTtcblxuICAgIC8vIEdldCB0aGUga2V5IG9mIHRoZSBpdGVtIGJlaW5nIHJlbW92ZWRcbiAgICBjb25zdCByZW1vdmVkS2V5ID0gdGhpcy5zdGF0ZS5rZXlzW2luZGV4XTtcblxuICAgIC8vIFVwZGF0ZSBzdGF0ZSB3aGlsZSBwcmVzZXJ2aW5nIGtleXMgZm9yIHJlbWFpbmluZyBpdGVtc1xuICAgIGNvbnN0IG5ld0tleXMgPSBbLi4udGhpcy5zdGF0ZS5rZXlzXTtcbiAgICBuZXdLZXlzLnNwbGljZShpbmRleCwgMSk7XG4gICAgaXRlbXNDb2xsYXBzZWQuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXRlbXNDb2xsYXBzZWQ6IFsuLi5pdGVtc0NvbGxhcHNlZF0sXG4gICAgICBrZXlzOiBuZXdLZXlzLFxuICAgIH0pO1xuXG4gICAgLy8gQ2xlYXIgdGhlIHJlZiBmb3IgdGhlIHJlbW92ZWQgaXRlbVxuICAgIGRlbGV0ZSB0aGlzLmNoaWxkUmVmc1tyZW1vdmVkS2V5XTtcblxuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUuZGVsZXRlKGluZGV4KTtcblxuICAgIC8vIENsZWFyIGVycm9ycyBmb3IgdGhlIHJlbW92ZWQgaXRlbSBhbmQgaXRzIGNoaWxkcmVuXG4gICAgaWYgKGZpZWxkc0Vycm9ycykge1xuICAgICAgT2JqZWN0LmVudHJpZXMoZmllbGRzRXJyb3JzLnRvSlMoKSkuZm9yRWFjaCgoW2ZpZWxkSWQsIGVycm9yc10pID0+IHtcbiAgICAgICAgaWYgKGVycm9ycy5zb21lKGVyciA9PiBlcnIucGFyZW50SWRzPy5pbmNsdWRlcyhyZW1vdmVkS2V5KSkpIHtcbiAgICAgICAgICBjbGVhckZpZWxkRXJyb3JzKGZpZWxkSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiBsaXN0IGlzIGVtcHR5LCBtYXJrIGl0IGFzIHZhbGlkXG4gICAgaWYgKG5ld1ZhbHVlLnNpemUgPT09IDApIHtcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMoZm9ySUQpO1xuICAgICAgb25WYWxpZGF0ZU9iamVjdChmb3JJRCwgW10pO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgdmFsdWUgbGFzdCB0byBlbnN1cmUgYWxsIGVycm9yIHN0YXRlcyBhcmUgY2xlYXJlZFxuICAgIG9uQ2hhbmdlKG5ld1ZhbHVlLCBwYXJzZWRNZXRhZGF0YSk7XG4gIH07XG5cbiAgaGFuZGxlSXRlbUNvbGxhcHNlVG9nZ2xlID0gKGluZGV4LCBldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBuZXdJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkLm1hcCgoY29sbGFwc2VkLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gaXRlbUluZGV4KSB7XG4gICAgICAgIHJldHVybiAhY29sbGFwc2VkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxhcHNlZDtcbiAgICB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGl0ZW1zQ29sbGFwc2VkOiBuZXdJdGVtc0NvbGxhcHNlZCxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVDb2xsYXBzZUFsbFRvZ2dsZSA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IHZhbHVlLCBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGl0ZW1zQ29sbGFwc2VkLCBsaXN0Q29sbGFwc2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IG1pbmltaXplQ29sbGFwc2VkSXRlbXMgPSBmaWVsZC5nZXQoJ21pbmltaXplX2NvbGxhcHNlZCcsIGZhbHNlKTtcbiAgICBjb25zdCBsaXN0Q29sbGFwc2VkQnlEZWZhdWx0ID0gZmllbGQuZ2V0KCdjb2xsYXBzZWQnLCB0cnVlKTtcbiAgICBjb25zdCBhbGxJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkLmV2ZXJ5KHZhbCA9PiB2YWwgPT09IHRydWUpO1xuXG4gICAgaWYgKG1pbmltaXplQ29sbGFwc2VkSXRlbXMpIHtcbiAgICAgIGxldCB1cGRhdGVkSXRlbXNDb2xsYXBzZWQgPSBpdGVtc0NvbGxhcHNlZDtcbiAgICAgIC8vIE9ubHkgYWxsb3cgY29sbGFwc2luZyBhbGwgaXRlbXMgaW4gdGhpcyBtb2RlIGJ1dCBub3Qgb3BlbmluZyBhbGwgYXQgb25jZVxuICAgICAgaWYgKCFsaXN0Q29sbGFwc2VkIHx8ICFsaXN0Q29sbGFwc2VkQnlEZWZhdWx0KSB7XG4gICAgICAgIHVwZGF0ZWRJdGVtc0NvbGxhcHNlZCA9IEFycmF5KHZhbHVlLnNpemUpLmZpbGwoIWxpc3RDb2xsYXBzZWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxpc3RDb2xsYXBzZWQ6ICFsaXN0Q29sbGFwc2VkLCBpdGVtc0NvbGxhcHNlZDogdXBkYXRlZEl0ZW1zQ29sbGFwc2VkIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXRlbXNDb2xsYXBzZWQ6IEFycmF5KHZhbHVlLnNpemUpLmZpbGwoIWFsbEl0ZW1zQ29sbGFwc2VkKSB9KTtcbiAgICB9XG4gIH07XG5cbiAgb2JqZWN0TGFiZWwoaXRlbSkge1xuICAgIGNvbnN0IHsgZmllbGQsIGVudHJ5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuZ2V0VmFsdWVUeXBlKCk7XG4gICAgc3dpdGNoICh2YWx1ZVR5cGUpIHtcbiAgICAgIGNhc2UgdmFsdWVUeXBlcy5NSVhFRDoge1xuICAgICAgICBpZiAoIXZhbGlkYXRlSXRlbShmaWVsZCwgaXRlbSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSBnZXRUeXBlZEZpZWxkRm9yVmFsdWUoZmllbGQsIGl0ZW0pO1xuICAgICAgICBjb25zdCBsYWJlbCA9IGl0ZW1UeXBlLmdldCgnbGFiZWwnLCBpdGVtVHlwZS5nZXQoJ25hbWUnKSk7XG4gICAgICAgIC8vIGVhY2ggdHlwZSBjYW4gaGF2ZSBpdHMgb3duIHN1bW1hcnksIGJ1dCBkZWZhdWx0IHRvIHRoZSBsaXN0IHN1bW1hcnkgaWYgZXhpc3RzXG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBpdGVtVHlwZS5nZXQoJ3N1bW1hcnknLCBmaWVsZC5nZXQoJ3N1bW1hcnknKSk7XG4gICAgICAgIGNvbnN0IGxhYmVsUmV0dXJuID0gc3VtbWFyeSA/IGhhbmRsZVN1bW1hcnkoc3VtbWFyeSwgZW50cnksIGxhYmVsLCBpdGVtKSA6IGxhYmVsO1xuICAgICAgICByZXR1cm4gbGFiZWxSZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIHZhbHVlVHlwZXMuU0lOR0xFOiB7XG4gICAgICAgIGNvbnN0IHNpbmdsZUZpZWxkID0gZmllbGQuZ2V0KCdmaWVsZCcpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IHNpbmdsZUZpZWxkLmdldCgnbGFiZWwnLCBzaW5nbGVGaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBmaWVsZC5nZXQoJ3N1bW1hcnknKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGZyb21KUyh7IFtzaW5nbGVGaWVsZC5nZXQoJ25hbWUnKV06IGl0ZW0gfSk7XG4gICAgICAgIGNvbnN0IGxhYmVsUmV0dXJuID0gc3VtbWFyeSA/IGhhbmRsZVN1bW1hcnkoc3VtbWFyeSwgZW50cnksIGxhYmVsLCBkYXRhKSA6IGxhYmVsO1xuICAgICAgICByZXR1cm4gbGFiZWxSZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIHZhbHVlVHlwZXMuTVVMVElQTEU6IHtcbiAgICAgICAgaWYgKCF2YWxpZGF0ZUl0ZW0oZmllbGQsIGl0ZW0pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG11bHRpRmllbGRzID0gZmllbGQuZ2V0KCdmaWVsZHMnKTtcbiAgICAgICAgY29uc3QgbGFiZWxGaWVsZCA9IG11bHRpRmllbGRzICYmIG11bHRpRmllbGRzLmZpcnN0KCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS5nZXQobGFiZWxGaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBmaWVsZC5nZXQoJ3N1bW1hcnknKTtcbiAgICAgICAgY29uc3QgbGFiZWxSZXR1cm4gPSBzdW1tYXJ5ID8gaGFuZGxlU3VtbWFyeShzdW1tYXJ5LCBlbnRyeSwgdmFsdWUsIGl0ZW0pIDogdmFsdWU7XG4gICAgICAgIHJldHVybiAobGFiZWxSZXR1cm4gfHwgYE5vICR7bGFiZWxGaWVsZC5nZXQoJ25hbWUnKX1gKS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBvblNvcnRFbmQgPSAoeyBvbGRJbmRleCwgbmV3SW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCwga2V5cyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIC8vIFVwZGF0ZSB2YWx1ZVxuICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZS5nZXQob2xkSW5kZXgpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUuZGVsZXRlKG9sZEluZGV4KS5pbnNlcnQobmV3SW5kZXgsIGl0ZW0pO1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3VmFsdWUpO1xuXG4gICAgLy8gVXBkYXRlIGNvbGxhcHNpbmdcbiAgICBjb25zdCBjb2xsYXBzZWQgPSBpdGVtc0NvbGxhcHNlZFtvbGRJbmRleF07XG4gICAgaXRlbXNDb2xsYXBzZWQuc3BsaWNlKG9sZEluZGV4LCAxKTtcbiAgICBjb25zdCB1cGRhdGVkSXRlbXNDb2xsYXBzZWQgPSBbLi4uaXRlbXNDb2xsYXBzZWRdO1xuICAgIHVwZGF0ZWRJdGVtc0NvbGxhcHNlZC5zcGxpY2UobmV3SW5kZXgsIDAsIGNvbGxhcHNlZCk7XG5cbiAgICAvLyBNb3ZlIGtleXMgdG8gbWFpbnRhaW4gcmVsYXRpb25zaGlwc1xuICAgIGNvbnN0IG1vdmVkS2V5ID0ga2V5c1tvbGRJbmRleF07XG4gICAgY29uc3QgdXBkYXRlZEtleXMgPSBbLi4ua2V5c107XG4gICAgdXBkYXRlZEtleXMuc3BsaWNlKG9sZEluZGV4LCAxKTtcbiAgICB1cGRhdGVkS2V5cy5zcGxpY2UobmV3SW5kZXgsIDAsIG1vdmVkS2V5KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBpdGVtc0NvbGxhcHNlZDogdXBkYXRlZEl0ZW1zQ29sbGFwc2VkLCBrZXlzOiB1cGRhdGVkS2V5cyB9KTtcbiAgfTtcblxuICBoYXNFcnJvciA9IGluZGV4ID0+IHtcbiAgICBjb25zdCB7IGZpZWxkc0Vycm9ycyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoZmllbGRzRXJyb3JzICYmIGZpZWxkc0Vycm9ycy5zaXplID4gMCkge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZmllbGRzRXJyb3JzLnRvSlMoKSkuc29tZShhcnIgPT5cbiAgICAgICAgYXJyLnNvbWUoZXJyID0+IGVyci5wYXJlbnRJZHMgJiYgZXJyLnBhcmVudElkcy5pbmNsdWRlcyh0aGlzLnN0YXRlLmtleXNbaW5kZXhdKSksXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICBmb2N1cyhwYXRoKSB7XG4gICAgY29uc3QgW2luZGV4LCAuLi5yZW1haW5pbmdQYXRoXSA9IHBhdGguc3BsaXQoJy4nKTtcblxuICAgIGlmICh0aGlzLnN0YXRlLmxpc3RDb2xsYXBzZWQgfHwgdGhpcy5zdGF0ZS5pdGVtc0NvbGxhcHNlZFtpbmRleF0pIHtcbiAgICAgIGNvbnN0IG5ld0l0ZW1zQ29sbGFwc2VkID0gWy4uLnRoaXMuc3RhdGUuaXRlbXNDb2xsYXBzZWRdO1xuICAgICAgbmV3SXRlbXNDb2xsYXBzZWRbaW5kZXhdID0gZmFsc2U7XG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICB7XG4gICAgICAgICAgbGlzdENvbGxhcHNlZDogZmFsc2UsXG4gICAgICAgICAgaXRlbXNDb2xsYXBzZWQ6IG5ld0l0ZW1zQ29sbGFwc2VkLFxuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5zdGF0ZS5rZXlzW2luZGV4XTtcbiAgICAgICAgICBjb25zdCBjb250cm9sID0gdGhpcy5jaGlsZFJlZnNba2V5XTtcbiAgICAgICAgICBpZiAoY29udHJvbD8uZm9jdXMpIHtcbiAgICAgICAgICAgIGNvbnRyb2wuZm9jdXMocmVtYWluaW5nUGF0aC5qb2luKCcuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMuc3RhdGUua2V5c1tpbmRleF07XG4gICAgICBjb25zdCBjb250cm9sID0gdGhpcy5jaGlsZFJlZnNba2V5XTtcbiAgICAgIGlmIChjb250cm9sPy5mb2N1cykge1xuICAgICAgICBjb250cm9sLmZvY3VzKHJlbWFpbmluZ1BhdGguam9pbignLicpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGlzcGxheS1uYW1lXG4gIHJlbmRlckl0ZW0gPSAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVXcmFwcGVyLFxuICAgICAgZWRpdG9yQ29udHJvbCxcbiAgICAgIG9uVmFsaWRhdGVPYmplY3QsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMsXG4gICAgICBmaWVsZHNFcnJvcnMsXG4gICAgICBjb250cm9sUmVmLFxuICAgICAgcmVzb2x2ZVdpZGdldCxcbiAgICAgIHBhcmVudElkcyxcbiAgICAgIGZvcklELFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHsgaXRlbXNDb2xsYXBzZWQsIGtleXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY29sbGFwc2VkID0gaXRlbXNDb2xsYXBzZWRbaW5kZXhdO1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdO1xuICAgIGxldCBmaWVsZCA9IHRoaXMucHJvcHMuZmllbGQ7XG4gICAgY29uc3QgaGFzRXJyb3IgPSB0aGlzLmhhc0Vycm9yKGluZGV4KTtcbiAgICBjb25zdCBpc1ZhcmlhYmxlVHlwZXNMaXN0ID0gdGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5NSVhFRDtcbiAgICBpZiAoaXNWYXJpYWJsZVR5cGVzTGlzdCkge1xuICAgICAgZmllbGQgPSBnZXRUeXBlZEZpZWxkRm9yVmFsdWUoZmllbGQsIGl0ZW0pO1xuICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJFcnJvbmVvdXNUeXBlZEl0ZW0oaW5kZXgsIGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8U29ydGFibGVMaXN0SXRlbVxuICAgICAgICBjc3M9e1tzdHlsZXMubGlzdENvbnRyb2xJdGVtLCBjb2xsYXBzZWQgJiYgc3R5bGVzLmxpc3RDb250cm9sSXRlbUNvbGxhcHNlZF19XG4gICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAga2V5PXtrZXl9XG4gICAgICAgIGlkPXtrZXl9XG4gICAgICAgIGtleXM9e2tleXN9XG4gICAgICA+XG4gICAgICAgIHtpc1ZhcmlhYmxlVHlwZXNMaXN0ICYmIChcbiAgICAgICAgICA8TGFiZWxDb21wb25lbnRcbiAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgIGlzQWN0aXZlPXtmYWxzZX1cbiAgICAgICAgICAgIGhhc0Vycm9ycz17aGFzRXJyb3J9XG4gICAgICAgICAgICB1bmlxdWVGaWVsZElkPXt0aGlzLnVuaXF1ZUZpZWxkSWR9XG4gICAgICAgICAgICBpc0ZpZWxkT3B0aW9uYWw9e2ZpZWxkLmdldCgncmVxdWlyZWQnKSA9PT0gZmFsc2V9XG4gICAgICAgICAgICB0PXt0fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIDxTdHlsZWRMaXN0SXRlbVRvcEJhclxuICAgICAgICAgIGNvbGxhcHNlZD17Y29sbGFwc2VkfVxuICAgICAgICAgIG9uQ29sbGFwc2VUb2dnbGU9e3BhcnRpYWwodGhpcy5oYW5kbGVJdGVtQ29sbGFwc2VUb2dnbGUsIGluZGV4KX1cbiAgICAgICAgICBkcmFnSGFuZGxlPXtEcmFnSGFuZGxlfVxuICAgICAgICAgIGlkPXtrZXl9XG4gICAgICAgICAgYWxsb3dSZW1vdmU9e2ZpZWxkLmdldCgnYWxsb3dfcmVtb3ZlJywgdHJ1ZSl9XG4gICAgICAgICAgYWxsb3dSZW9yZGVyPXtmaWVsZC5nZXQoJ2FsbG93X3Jlb3JkZXInLCB0cnVlKX1cbiAgICAgICAgICBvblJlbW92ZT17cGFydGlhbCh0aGlzLmhhbmRsZVJlbW92ZSwgaW5kZXgpfVxuICAgICAgICAgIGxhYmVsPXt0aGlzLm9iamVjdExhYmVsKGl0ZW0pfVxuICAgICAgICAgIGRhdGEtdGVzdGlkPXtgc3R5bGVkLWxpc3QtaXRlbS10b3AtYmFyLSR7a2V5fWB9XG4gICAgICAgIC8+XG4gICAgICAgIHtudWxsfVxuICAgICAgICA8Q2xhc3NOYW1lcz5cbiAgICAgICAgICB7KHsgY3NzLCBjeCB9KSA9PiAoXG4gICAgICAgICAgICA8T2JqZWN0Q29udHJvbFxuICAgICAgICAgICAgICBjbGFzc05hbWVXcmFwcGVyPXtjeChjbGFzc05hbWVXcmFwcGVyLCB7XG4gICAgICAgICAgICAgICAgW2Nzc2BcbiAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmNvbGxhcHNlZE9iamVjdENvbnRyb2x9O1xuICAgICAgICAgICAgICAgIGBdOiBjb2xsYXBzZWQsXG4gICAgICAgICAgICAgICAgW2Nzc2BcbiAgICAgICAgICAgICAgICAgICR7c3R5bGVTdHJpbmdzLmV4cGFuZGVkVGlnaHR9O1xuICAgICAgICAgICAgICAgIGBdOiAhY29sbGFwc2VkLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgdmFsdWU9e2l0ZW19XG4gICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgICAgb25DaGFuZ2VPYmplY3Q9e3RoaXMuaGFuZGxlQ2hhbmdlRm9yKGluZGV4KX1cbiAgICAgICAgICAgICAgZWRpdG9yQ29udHJvbD17ZWRpdG9yQ29udHJvbH1cbiAgICAgICAgICAgICAgcmVzb2x2ZVdpZGdldD17cmVzb2x2ZVdpZGdldH1cbiAgICAgICAgICAgICAgbWV0YWRhdGE9e21ldGFkYXRhfVxuICAgICAgICAgICAgICBmb3JMaXN0XG4gICAgICAgICAgICAgIG9uVmFsaWRhdGVPYmplY3Q9e29uVmFsaWRhdGVPYmplY3R9XG4gICAgICAgICAgICAgIGNsZWFyRmllbGRFcnJvcnM9e2NsZWFyRmllbGRFcnJvcnN9XG4gICAgICAgICAgICAgIGZpZWxkc0Vycm9ycz17ZmllbGRzRXJyb3JzfVxuICAgICAgICAgICAgICByZWY9e3RoaXMucHJvY2Vzc0NvbnRyb2xSZWZ9XG4gICAgICAgICAgICAgIGNvbnRyb2xSZWY9e2NvbnRyb2xSZWZ9XG4gICAgICAgICAgICAgIHZhbGlkYXRpb25LZXk9e2tleX1cbiAgICAgICAgICAgICAgY29sbGFwc2VkPXtjb2xsYXBzZWR9XG4gICAgICAgICAgICAgIGRhdGEtdGVzdGlkPXtgb2JqZWN0LWNvbnRyb2wtJHtrZXl9YH1cbiAgICAgICAgICAgICAgaGFzRXJyb3I9e2hhc0Vycm9yfVxuICAgICAgICAgICAgICBwYXJlbnRJZHM9e1suLi5wYXJlbnRJZHMsIGZvcklELCBrZXldfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L0NsYXNzTmFtZXM+XG4gICAgICA8L1NvcnRhYmxlTGlzdEl0ZW0+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFcnJvbmVvdXNUeXBlZEl0ZW0oaW5kZXgsIGl0ZW0pIHtcbiAgICBjb25zdCBmaWVsZCA9IHRoaXMucHJvcHMuZmllbGQ7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZ2V0RXJyb3JNZXNzYWdlRm9yVHlwZWRGaWVsZEFuZFZhbHVlKGZpZWxkLCBpdGVtKTtcbiAgICBjb25zdCBrZXkgPSBgaXRlbS0ke2luZGV4fWA7XG4gICAgcmV0dXJuIChcbiAgICAgIDxTb3J0YWJsZUxpc3RJdGVtXG4gICAgICAgIGNzcz17W3N0eWxlcy5saXN0Q29udHJvbEl0ZW0sIHN0eWxlcy5saXN0Q29udHJvbEl0ZW1Db2xsYXBzZWRdfVxuICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgIGtleT17a2V5fVxuICAgICAgPlxuICAgICAgICA8U3R5bGVkTGlzdEl0ZW1Ub3BCYXJcbiAgICAgICAgICBvbkNvbGxhcHNlVG9nZ2xlPXtudWxsfVxuICAgICAgICAgIG9uUmVtb3ZlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlUmVtb3ZlLCBpbmRleCwga2V5KX1cbiAgICAgICAgICBkcmFnSGFuZGxlPXtEcmFnSGFuZGxlfVxuICAgICAgICAgIGlkPXtrZXl9XG4gICAgICAgIC8+XG4gICAgICAgIDxOZXN0ZWRPYmplY3RMYWJlbCBjb2xsYXBzZWQ9e3RydWV9IGVycm9yPXt0cnVlfT5cbiAgICAgICAgICB7ZXJyb3JNZXNzYWdlfVxuICAgICAgICA8L05lc3RlZE9iamVjdExhYmVsPlxuICAgICAgPC9Tb3J0YWJsZUxpc3RJdGVtPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJMaXN0Q29udHJvbCgpIHtcbiAgICBjb25zdCB7IHZhbHVlLCBmb3JJRCwgZmllbGQsIGNsYXNzTmFtZVdyYXBwZXIsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCwgbGlzdENvbGxhcHNlZCwga2V5cyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpdGVtcyA9IHZhbHVlIHx8IExpc3QoKTtcbiAgICBjb25zdCBsYWJlbCA9IGZpZWxkLmdldCgnbGFiZWwnLCBmaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgY29uc3QgbGFiZWxTaW5ndWxhciA9IGZpZWxkLmdldCgnbGFiZWxfc2luZ3VsYXInKSB8fCBmaWVsZC5nZXQoJ2xhYmVsJywgZmllbGQuZ2V0KCduYW1lJykpO1xuICAgIGNvbnN0IGxpc3RMYWJlbCA9IGl0ZW1zLnNpemUgPT09IDEgPyBsYWJlbFNpbmd1bGFyLnRvTG93ZXJDYXNlKCkgOiBsYWJlbC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IG1pbmltaXplQ29sbGFwc2VkSXRlbXMgPSBmaWVsZC5nZXQoJ21pbmltaXplX2NvbGxhcHNlZCcsIGZhbHNlKTtcbiAgICBjb25zdCBhbGxJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkLmV2ZXJ5KHZhbCA9PiB2YWwgPT09IHRydWUpO1xuICAgIGNvbnN0IHNlbGZDb2xsYXBzZWQgPSBhbGxJdGVtc0NvbGxhcHNlZCAmJiAobGlzdENvbGxhcHNlZCB8fCAhbWluaW1pemVDb2xsYXBzZWRJdGVtcyk7XG5cbiAgICBjb25zdCBpdGVtc0FycmF5ID0ga2V5cy5tYXAoa2V5ID0+ICh7IGlkOiBrZXkgfSkpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDbGFzc05hbWVzPlxuICAgICAgICB7KHsgY3gsIGNzcyB9KSA9PiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICAgICAgcmVmPXt0aGlzLnJvb3RSZWZ9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICAgICAgICBjbGFzc05hbWVXcmFwcGVyLFxuICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3Mub2JqZWN0V2lkZ2V0VG9wQmFyQ29udGFpbmVyfVxuICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8T2JqZWN0V2lkZ2V0VG9wQmFyXG4gICAgICAgICAgICAgIGFsbG93QWRkPXtmaWVsZC5nZXQoJ2FsbG93X2FkZCcsIHRydWUpfVxuICAgICAgICAgICAgICBvbkFkZD17dGhpcy5oYW5kbGVBZGR9XG4gICAgICAgICAgICAgIHR5cGVzPXtmaWVsZC5nZXQoVFlQRVNfS0VZLCBudWxsKX1cbiAgICAgICAgICAgICAgb25BZGRUeXBlPXt0eXBlID0+IHRoaXMuaGFuZGxlQWRkVHlwZSh0eXBlLCByZXNvbHZlRmllbGRLZXlUeXBlKGZpZWxkKSl9XG4gICAgICAgICAgICAgIGhlYWRpbmc9e2Ake2l0ZW1zLnNpemV9ICR7bGlzdExhYmVsfWB9XG4gICAgICAgICAgICAgIGxhYmVsPXtsYWJlbFNpbmd1bGFyLnRvTG93ZXJDYXNlKCl9XG4gICAgICAgICAgICAgIG9uQ29sbGFwc2VUb2dnbGU9e3RoaXMuaGFuZGxlQ29sbGFwc2VBbGxUb2dnbGV9XG4gICAgICAgICAgICAgIGNvbGxhcHNlZD17c2VsZkNvbGxhcHNlZH1cbiAgICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7KCFzZWxmQ29sbGFwc2VkIHx8ICFtaW5pbWl6ZUNvbGxhcHNlZEl0ZW1zKSAmJiAoXG4gICAgICAgICAgICAgIDxTb3J0YWJsZUxpc3QgaXRlbXM9e2l0ZW1zQXJyYXl9IGtleXM9e2tleXN9IG9uU29ydEVuZD17dGhpcy5vblNvcnRFbmR9PlxuICAgICAgICAgICAgICAgIHtpdGVtcy5tYXAodGhpcy5yZW5kZXJJdGVtKX1cbiAgICAgICAgICAgICAgPC9Tb3J0YWJsZUxpc3Q+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9DbGFzc05hbWVzPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJJbnB1dCgpIHtcbiAgICBjb25zdCB7IGZvcklELCBjbGFzc05hbWVXcmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgb25Gb2N1cz17dGhpcy5oYW5kbGVGb2N1c31cbiAgICAgICAgb25CbHVyPXt0aGlzLmhhbmRsZUJsdXJ9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5nZXRWYWx1ZVR5cGUoKSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTGlzdENvbnRyb2woKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVySW5wdXQoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ== */")],
      index: index,
      key: key
    }, ___EmotionJSX(StyledListItemTopBar, {
      onCollapseToggle: null,
      onRemove: partial(this.handleRemove, index, key),
      dragHandle: DragHandle,
      id: key
    }), ___EmotionJSX(NestedObjectLabel, {
      collapsed: true,
      error: true
    }, errorMessage));
  }
  renderListControl() {
    const {
      value,
      forID,
      field,
      classNameWrapper,
      t
    } = this.props;
    const {
      itemsCollapsed,
      listCollapsed,
      keys
    } = this.state;
    const items = value || List();
    const label = field.get('label', field.get('name'));
    const labelSingular = field.get('label_singular') || field.get('label', field.get('name'));
    const listLabel = items.size === 1 ? labelSingular.toLowerCase() : label.toLowerCase();
    const minimizeCollapsedItems = field.get('minimize_collapsed', false);
    const allItemsCollapsed = itemsCollapsed.every(val => val === true);
    const selfCollapsed = allItemsCollapsed && (listCollapsed || !minimizeCollapsedItems);
    const itemsArray = keys.map(key => ({
      id: key
    }));
    return ___EmotionJSX(ClassNames, null, ({
      cx,
      css
    }) => ___EmotionJSX("div", {
      id: forID,
      ref: this.rootRef,
      className: cx(classNameWrapper, css`
                ${styleStrings.objectWidgetTopBarContainer}
              `)
    }, ___EmotionJSX(ObjectWidgetTopBar, {
      allowAdd: field.get('allow_add', true),
      onAdd: this.handleAdd,
      types: field.get(TYPES_KEY, null),
      onAddType: type => this.handleAddType(type, resolveFieldKeyType(field)),
      heading: `${items.size} ${listLabel}`,
      label: labelSingular.toLowerCase(),
      onCollapseToggle: this.handleCollapseAllToggle,
      collapsed: selfCollapsed,
      t: t
    }), (!selfCollapsed || !minimizeCollapsedItems) && ___EmotionJSX(SortableList, {
      items: itemsArray,
      keys: keys,
      onSortEnd: this.onSortEnd
    }, items.map(this.renderItem))));
  }
  renderInput() {
    const {
      forID,
      classNameWrapper
    } = this.props;
    const {
      value
    } = this.state;
    return ___EmotionJSX("input", {
      type: "text",
      id: forID,
      value: value,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: classNameWrapper
    });
  }
  render() {
    if (this.getValueType() !== null) {
      return this.renderListControl();
    } else {
      return this.renderInput();
    }
  }
}