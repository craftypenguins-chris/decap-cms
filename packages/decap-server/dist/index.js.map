{"version":3,"file":"index.js","mappings":"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","sources":["webpack://decap-server/external commonjs \"morgan\"","webpack://decap-server/./src/middlewares/utils/entries.ts","webpack://decap-server/external commonjs \"winston\"","webpack://decap-server/../decap-cms-lib-util/src/APIUtils.ts","webpack://decap-server/external commonjs \"express\"","webpack://decap-server/external commonjs \"what-the-diff\"","webpack://decap-server/external commonjs \"async-mutex\"","webpack://decap-server/./src/middlewares/utils/fs.ts","webpack://decap-server/external commonjs \"cors\"","webpack://decap-server/external commonjs \"@hapi/joi\"","webpack://decap-server/./src/middlewares/joi/customValidators.ts","webpack://decap-server/./src/index.ts","webpack://decap-server/./src/middlewares/localFs/index.ts","webpack://decap-server/external commonjs \"simple-git\"","webpack://decap-server/external commonjs \"dotenv\"","webpack://decap-server/./src/middlewares/common/index.ts","webpack://decap-server/external node-commonjs \"fs\"","webpack://decap-server/external node-commonjs \"path\"","webpack://decap-server/./src/logger.ts","webpack://decap-server/./src/middlewares/joi/index.ts","webpack://decap-server/./src/middlewares/localGit/index.ts","webpack://decap-server/external node-commonjs \"crypto\"","webpack://decap-server/webpack/bootstrap","webpack://decap-server/webpack/startup"],"sourcesContent":["module.exports = require(\"morgan\");","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nfunction sha256(buffer: Buffer) {\n  return crypto.createHash('sha256').update(buffer).digest('hex');\n}\n\n// normalize windows os path format\nfunction normalizePath(path: string) {\n  return path.replace(/\\\\/g, '/');\n}\n\nexport async function entriesFromFiles(\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n}\n\nexport async function readMediaFile(repoPath: string, file: string) {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n}\n","module.exports = require(\"winston\");","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Decap CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Decap CMS.';\n\nconst DEFAULT_DECAP_CMS_LABEL_PREFIX = 'decap-cms/';\n\nfunction getLabelPrefix(labelPrefix: string) {\n  return labelPrefix || DEFAULT_DECAP_CMS_LABEL_PREFIX;\n}\n\nexport function isCMSLabel(label: string, labelPrefix: string) {\n  return label.startsWith(getLabelPrefix(labelPrefix));\n}\n\nexport function labelToStatus(label: string, labelPrefix: string) {\n  return label.slice(getLabelPrefix(labelPrefix).length);\n}\n\nexport function statusToLabel(status: string, labelPrefix: string) {\n  return `${getLabelPrefix(labelPrefix)}${status}`;\n}\n\nexport function generateContentKey(collectionName: string, slug: string) {\n  return `${collectionName}/${slug}`;\n}\n\nexport function parseContentKey(contentKey: string) {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.slice(0, index), slug: contentKey.slice(index + 1) };\n}\n\nexport function contentKeyFromBranch(branch: string) {\n  return branch.slice(`${CMS_BRANCH_PREFIX}/`.length);\n}\n\nexport function branchFromContentKey(contentKey: string) {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n}\n","module.exports = require(\"express\");","module.exports = require(\"what-the-diff\");","module.exports = require(\"async-mutex\");","/* eslint-disable @typescript-eslint/no-explicit-any */\ndeclare const require: any;\nconst path = require('path');\nconst fs = require('fs').promises;\n\nasync function listFiles(dir: string, extension: string, depth: number): Promise<string[]> {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map((dirent: any) => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n}\n\nexport async function listRepoFiles(\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) {\n  const abs = path.join(repoPath, folder);\n  const files = await listFiles(abs, extension, depth);\n  return files.map(f => f.slice(repoPath.length + 1));\n}\n\n// List one-level children (files and directories) under a target folder relative to repoPath\nexport async function listDirChildren(\n  repoPath: string,\n  targetRelativeFolder: string,\n): Promise<{ type: 'file' | 'directory'; path: string; name: string }[]> {\n  const abs = path.join(repoPath, targetRelativeFolder);\n  try {\n    const dirents = await fs.readdir(abs, { withFileTypes: true });\n    return dirents.map((dirent: any) => {\n      const absChild = path.join(abs, dirent.name);\n      const relPath = absChild.slice(repoPath.length + 1);\n      return { type: dirent.isDirectory() ? 'directory' : 'file', path: relPath, name: dirent.name };\n    });\n  } catch (e) {\n    return [];\n  }\n}\n\nexport async function writeFile(filePath: string, content: any) {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n}\n\nexport async function deleteFile(repoPath: string, filePath: string) {\n  await fs.unlink(path.join(repoPath, filePath)).catch(() => undefined);\n}\n\nasync function moveFile(from: string, to: string) {\n  await fs.mkdir(path.dirname(to), { recursive: true });\n  await fs.rename(from, to);\n}\n\nexport async function move(from: string, to: string) {\n  // move file\n  await moveFile(from, to);\n\n  // move children\n  const sourceDir = path.dirname(from);\n  const destDir = path.dirname(to);\n  const allFiles = await listFiles(sourceDir, '', 100);\n  await Promise.all(allFiles.map(file => moveFile(file, file.replace(sourceDir, destDir))));\n}\n\nexport async function getUpdateDate(repoPath: string, filePath: string) {\n  return fs\n    .stat(path.join(repoPath, filePath))\n    .then((stat: any) => stat.mtime)\n    .catch(() => new Date());\n}\n","module.exports = require(\"cors\");","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport function pathTraversal(repoPath: string) {\n  return Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n}\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nrequire('dotenv').config();\nimport express from 'express';\n\nimport { registerCommonMiddlewares } from './middlewares/common';\nimport { registerMiddleware as registerLocalGit } from './middlewares/localGit';\nimport { registerMiddleware as registerLocalFs } from './middlewares/localFs';\nimport { createLogger } from './logger';\n\nconst app = express();\nconst port = Number(process.env.PORT) || 8081;\nconst host = process.env.HOST || '0.0.0.0';\nconst level = process.env.LOG_LEVEL || 'info';\n\n(async () => {\n  const logger = createLogger({ level });\n  const options = {\n    logger,\n  };\n\n  registerCommonMiddlewares(app, options);\n\n  try {\n    const mode = process.env.MODE || 'fs';\n    if (mode === 'fs') {\n      registerLocalFs(app, options);\n    } else if (mode === 'git') {\n      registerLocalGit(app, options);\n    } else {\n      throw new Error(`Unknown proxy mode '${mode}'`);\n    }\n  } catch (e) {\n    logger.error(e instanceof Error ? e.message : 'Unknown error');\n    process.exit(1);\n  }\n\n  return app.listen(port, host, () => {\n    logger.info(`Decap CMS Proxy Server listening on ${host}:${port}`);\n  });\n})();\n","import path from 'path';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, deleteFile, writeFile, move, listDirChildren } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  DeleteFilesParams,\n  DataFile,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\n\ntype FsOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nexport function localFsMiddleware({ repoPath, logger }: FsOptions) {\n  return async function (req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n          } = body.params as PersistEntryParams;\n          await Promise.all(\n            dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n          );\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          if (dataFiles.every(dataFile => dataFile.newPath)) {\n            dataFiles.forEach(async dataFile => {\n              await move(\n                path.join(repoPath, dataFile.path),\n                path.join(repoPath, dataFile.newPath!),\n              );\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder, subpath = '' } = body.params as GetMediaParams & { subpath?: string };\n          const root = path.join(repoPath, mediaFolder);\n          const norm = path.normalize(subpath || '').replace(/^\\\\+|\\/+$/g, '');\n          if (norm.includes('..')) {\n            return res.status(400).json({ error: 'Invalid subpath' });\n          }\n          const target = path.join(root, norm);\n          if (!target.startsWith(root)) {\n            return res.status(400).json({ error: 'Invalid subpath' });\n          }\n          const relTarget = path.relative(repoPath, target);\n          // one-level list of directories and files\n          const children = await listDirChildren(repoPath, relTarget);\n          const files = children.filter(c => c.type === 'file').map(c => c.path);\n          const dirs = children.filter(c => c.type === 'directory');\n          const serializedFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          const dirEntries = dirs.map(d => ({\n            id: d.path,\n            name: d.name,\n            path: d.path,\n            type: 'directory',\n            content: '',\n            encoding: 'base64',\n          }));\n          res.json([...dirEntries, ...serializedFiles]);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const { paths } = body.params as DeleteFilesParams;\n          await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(\n        `Error handling ${JSON.stringify(req.body)}: ${\n          e instanceof Error ? e.message : 'Unknown error'\n        }`,\n      );\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath, logger }));\n  logger.info(`Decap CMS File System Proxy Server configured with ${repoPath}`);\n}\n","module.exports = require(\"simple-git\");","module.exports = require(\"dotenv\");","import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nimport type winston from 'winston';\n\nexport type Options = {\n  logger: winston.Logger;\n};\n\nexport function registerCommonMiddlewares(app: express.Express, options: Options) {\n  const { logger } = options;\n  const stream = {\n    write: (message: string) => {\n      logger.debug(String(message).trim());\n    },\n  };\n  app.use(morgan('combined', { stream }));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","import winston from 'winston';\n\nconst { combine, colorize, simple } = winston.format;\n\ntype LogOptions = {\n  level: string;\n};\n\nexport function createLogger({ level }: LogOptions) {\n  return winston.createLogger({\n    level,\n    format: combine(colorize(), simple()),\n    transports: [new winston.transports.Console()],\n  });\n}\n","import Joi from '@hapi/joi';\n\nimport type express from 'express';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'unpublishedEntryDataFile',\n  'unpublishedEntryMediaFile',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'deleteFiles',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport function defaultSchema({ path = requiredString } = {}) {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const dataFile = Joi.object({\n    slug: requiredString,\n    path,\n    raw: requiredString,\n    newPath: path.optional(),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            id: Joi.string().optional(),\n            collection: Joi.string().optional(),\n            slug: Joi.string().optional(),\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryDataFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryMediaFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            cmsLabelPrefix: Joi.string().optional(),\n            entry: dataFile, // entry is kept for backwards compatibility\n            dataFiles: Joi.array().items(dataFile),\n            assets: Joi.array().items(asset).required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .xor('entry', 'dataFiles')\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFiles',\n        then: defaultParams\n          .keys({\n            paths: Joi.array().items(path).min(1).required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n}\n\nexport function joi(schema: Joi.Schema) {\n  return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { error } = schema.validate(req.body, { allowUnknown: true });\n    if (error) {\n      const { details } = error;\n      const message = details.map(i => i.message).join(',');\n      res.status(422).json({ error: message });\n    } else {\n      next();\n    }\n  };\n}\n","import path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n  parseContentKey,\n} from 'decap-cms-lib-util/src/APIUtils';\nimport { parse } from 'what-the-diff';\n// eslint-disable-next-line import/no-named-as-default\nimport simpleGit from 'simple-git';\nimport { Mutex, withTimeout } from 'async-mutex';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile, move, deleteFile, getUpdateDate, listDirChildren } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  DataFile,\n  GetMediaFileParams,\n  DeleteEntryParams,\n  DeleteFilesParams,\n  UnpublishedEntryDataFileParams,\n  UnpublishedEntryMediaFileParams,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\nimport type { SimpleGit } from 'simple-git';\n\nasync function commit(git: SimpleGit, commitMessage: string) {\n  await git.add('.');\n  await git.commit(commitMessage, undefined, {\n    // setting the value to a string passes name=value\n    // any other value passes just the key\n    '--no-verify': null,\n    '--no-gpg-sign': null,\n  });\n}\n\nasync function getCurrentBranch(git: SimpleGit) {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n}\n\nasync function runOnBranch<T>(git: SimpleGit, branch: string, func: () => Promise<T>) {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n}\n\nfunction branchDescription(branch: string) {\n  return `branch.${branch}.description`;\n}\n\ntype GitOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nasync function commitEntry(\n  git: SimpleGit,\n  repoPath: string,\n  dataFiles: DataFile[],\n  assets: Asset[],\n  commitMessage: string,\n) {\n  // save entry content\n  await Promise.all(\n    dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n  );\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  if (dataFiles.every(dataFile => dataFile.newPath)) {\n    dataFiles.forEach(async dataFile => {\n      await move(path.join(repoPath, dataFile.path), path.join(repoPath, dataFile.newPath!));\n    });\n  }\n\n  // commits files\n  await commit(git, commitMessage);\n}\n\nasync function rebase(git: SimpleGit, branch: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function merge(git: SimpleGit, from: string, to: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function isBranchExists(git: SimpleGit, branch: string) {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n}\n\nasync function getDiffs(git: SimpleGit, source: string, dest: string) {\n  const rawDiff = await git.diff([source, dest]);\n  const diffs = parse(rawDiff).map(d => {\n    const oldPath = d.oldPath?.replace(/b\\//, '') || '';\n    const newPath = d.newPath?.replace(/b\\//, '') || '';\n    const path = newPath || (oldPath as string);\n    return {\n      oldPath,\n      newPath,\n      status: d.status,\n      newFile: d.status === 'added',\n      path,\n      id: path,\n      binary: d.binary || /.svg$/.test(path),\n    };\n  });\n  return diffs;\n}\n\nexport async function validateRepo({ repoPath }: { repoPath: string }) {\n  const git = simpleGit(repoPath);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\nexport function localGitMiddleware({ repoPath, logger }: GitOptions) {\n  const git = simpleGit(repoPath);\n\n  // we can only perform a single git operation at any given time\n  const mutex = withTimeout(new Mutex(), 3000, new Error('Request timed out'));\n\n  return async function (req: express.Request, res: express.Response) {\n    let release;\n    try {\n      release = await mutex.acquire();\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n          res.json(cmsBranches.map(contentKeyFromBranch));\n          break;\n        }\n        case 'unpublishedEntry': {\n          let { id, collection, slug, cmsLabelPrefix } = body.params as UnpublishedEntryParams;\n          if (id) {\n            ({ collection, slug } = parseContentKey(id));\n          }\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diffs = await getDiffs(git, branch, cmsBranch);\n            const label = await git.raw(['config', branchDescription(cmsBranch)]);\n            const status = label && labelToStatus(label.trim(), cmsLabelPrefix || '');\n            const updatedAt =\n              diffs.length >= 0\n                ? await runOnBranch(git, cmsBranch, async () => {\n                    const dates = await Promise.all(\n                      diffs.map(({ newPath }) => getUpdateDate(repoPath, newPath)),\n                    );\n                    return dates.reduce((a, b) => {\n                      return a > b ? a : b;\n                    });\n                  })\n                : new Date();\n            const unpublishedEntry = {\n              collection,\n              slug,\n              status,\n              diffs,\n              updatedAt,\n            };\n            res.json(unpublishedEntry);\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'unpublishedEntryDataFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryDataFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const [entry] = await runOnBranch(git, cmsBranch, () =>\n            entriesFromFiles(repoPath, [{ path }]),\n          );\n          res.json({ data: entry.data });\n          break;\n        }\n        case 'unpublishedEntryMediaFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryMediaFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const file = await runOnBranch(git, cmsBranch, () => readMediaFile(repoPath, path));\n          res.json(file);\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as DeleteEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            cmsLabelPrefix,\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n            options,\n          } = body.params as PersistEntryParams;\n\n          if (!options.useWorkflow) {\n            await runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n            });\n          } else {\n            const slug = dataFiles[0].slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diffs = await getDiffs(git, branch, cmsBranch);\n              // delete media files that have been removed from the entry\n              const toDelete = diffs.filter(\n                d => d.binary && !assets.map(a => a.path).includes(d.path),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f.path))));\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!branchExists) {\n                const description = statusToLabel(options.status, cmsLabelPrefix || '');\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const { collection, slug, newStatus, cmsLabelPrefix } =\n            body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus, cmsLabelPrefix || '');\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder, subpath = '' } = body.params as GetMediaParams & { subpath?: string };\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const targetRelative = path.join(mediaFolder, subpath).replace(/^\\\\+|\\/+$/g, '');\n            const children = await listDirChildren(repoPath, targetRelative);\n            const files = children.filter(c => c.type === 'file').map(c => c.path);\n            const dirs = children.filter(c => c.type === 'directory');\n            const serializedFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n            const dirEntries = dirs.map(d => ({\n              id: d.path,\n              name: d.name,\n              path: d.path,\n              type: 'directory',\n              content: '',\n              encoding: 'base64',\n            }));\n            return [...dirEntries, ...serializedFiles];\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await deleteFile(repoPath, filePath);\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const {\n            paths,\n            options: { commitMessage },\n          } = body.params as DeleteFilesParams;\n          await runOnBranch(git, branch, async () => {\n            await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(\n        `Error handling ${JSON.stringify(req.body)}: ${\n          e instanceof Error ? e.message : 'Unknown error'\n        }`,\n      );\n      res.status(500).json({ error: 'Unknown error' });\n    } finally {\n      release && release();\n    }\n  };\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath, logger }));\n  logger.info(`Decap CMS Git Proxy Server configured with ${repoPath}`);\n}\n","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(783);\n"],"names":["module","exports","require","sha256","buffer","createHash","update","digest","normalizePath","path","replace","async","repoPath","files","Promise","all","map","file","content","readFile","join","data","toString","label","id","e","encoding","name","basename","getLabelPrefix","labelPrefix","CMS_BRANCH_PREFIX","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","startsWith","slice","length","status","collectionName","slug","contentKey","index","indexOf","collection","branch","fs","listFiles","dir","extension","depth","dirents","readdir","withFileTypes","dirent","res","isDirectory","filter","f","endsWith","concat","moveFile","from","to","mkdir","dirname","recursive","rename","folder","abs","targetRelativeFolder","relPath","type","filePath","writeFile","unlink","catch","sourceDir","destDir","allFiles","stat","then","mtime","Date","extend","base","string","required","messages","validate","value","helpers","errors","error","app","port","Number","process","env","PORT","host","HOST","level","LOG_LEVEL","logger","createLogger","options","registerCommonMiddlewares","mode","MODE","Error","message","exit","listen","info","localFsMiddleware","req","body","action","json","repo","publish_modes","payload","params","entries","listRepoFiles","entriesFromFiles","entry","dataFiles","assets","dataFile","raw","a","Buffer","every","newPath","forEach","move","mediaFolder","subpath","root","norm","normalize","includes","target","relTarget","relative","children","listDirChildren","c","dirs","serializedFiles","readMediaFile","dirEntries","d","mediaFile","asset","deleteFile","paths","JSON","stringify","getSchema","defaultSchema","pathTraversal","resolve","GIT_REPO_DIRECTORY","cwd","post","joi","stream","write","debug","String","trim","use","limit","combine","colorize","simple","format","transports","Console","allowedActions","requiredString","requiredNumber","number","requiredBool","bool","defaultParams","object","valid","optional","when","switch","is","allow","keys","array","items","cmsLabelPrefix","commitMessage","useWorkflow","xor","newStatus","min","otherwise","forbidden","schema","next","allowUnknown","details","i","commit","git","add","undefined","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","commitEntry","isBranchExists","getDiffs","source","dest","rawDiff","diff","parse","oldPath","newFile","binary","test","validateRepo","checkIsRepo","localGitMiddleware","mutex","withTimeout","Mutex","release","acquire","cmsBranches","result","b","contentKeyFromBranch","parseContentKey","generateContentKey","cmsBranch","branchFromContentKey","diffs","labelToStatus","updatedAt","getUpdateDate","reduce","unpublishedEntry","checkoutLocalBranch","branchExists","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","mergeFromTo","merge","deleteLocalBranch","mediaFiles","targetRelative","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}