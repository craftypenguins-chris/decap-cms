#!/usr/bin/env node
(()=>{"use strict";var e={96:e=>{e.exports=require("morgan")},123:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.readMediaFile=t.entriesFromFiles=void 0;const n=i(a(982)),r=i(a(928)),s=a(896);function o(e){return n.default.createHash("sha256").update(e).digest("hex")}function l(e){return e.replace(/\\/g,"/")}t.entriesFromFiles=async function(e,t){return Promise.all(t.map(async t=>{try{const a=await s.promises.readFile(r.default.join(e,t.path));return{data:a.toString(),file:{path:l(t.path),label:t.label,id:o(a)}}}catch(e){return{data:null,file:{path:l(t.path),label:t.label,id:null}}}}))},t.readMediaFile=async function(e,t){const a="base64",i=await s.promises.readFile(r.default.join(e,t));return{id:o(i),content:i.toString(a),encoding:a,path:l(t),name:r.default.basename(t)}}},124:e=>{e.exports=require("winston")},161:(e,t)=>{function a(e){return e||"decap-cms/"}Object.defineProperty(t,"__esModule",{value:!0}),t.branchFromContentKey=t.contentKeyFromBranch=t.parseContentKey=t.generateContentKey=t.statusToLabel=t.labelToStatus=t.isCMSLabel=t.MERGE_COMMIT_MESSAGE=t.DEFAULT_PR_BODY=t.CMS_BRANCH_PREFIX=void 0,t.CMS_BRANCH_PREFIX="cms",t.DEFAULT_PR_BODY="Automatically generated by Decap CMS",t.MERGE_COMMIT_MESSAGE="Automatically generated. Merged on Decap CMS.",t.isCMSLabel=function(e,t){return e.startsWith(a(t))},t.labelToStatus=function(e,t){return e.slice(a(t).length)},t.statusToLabel=function(e,t){return`${a(t)}${e}`},t.generateContentKey=function(e,t){return`${e}/${t}`},t.parseContentKey=function(e){const t=e.indexOf("/");return{collection:e.slice(0,t),slug:e.slice(t+1)}},t.contentKeyFromBranch=function(e){return e.slice(`${t.CMS_BRANCH_PREFIX}/`.length)},t.branchFromContentKey=function(e){return`${t.CMS_BRANCH_PREFIX}/${e}`}},252:e=>{e.exports=require("express")},280:e=>{e.exports=require("what-the-diff")},354:e=>{e.exports=require("async-mutex")},476:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getUpdateDate=t.move=t.deleteFile=t.writeFile=t.listDirChildren=t.listRepoFiles=void 0;const i=a(928),n=a(896).promises;async function r(e,t,a){if(a<=0)return[];try{const s=await n.readdir(e,{withFileTypes:!0}),o=await Promise.all(s.map(n=>{const s=i.join(e,n.name);return n.isDirectory()?r(s,t,a-1):[s].filter(e=>e.endsWith(t))}));return[].concat(...o)}catch(e){return[]}}async function s(e,t){await n.mkdir(i.dirname(t),{recursive:!0}),await n.rename(e,t)}t.listRepoFiles=async function(e,t,a,n){const s=i.join(e,t);return(await r(s,a,n)).map(t=>t.slice(e.length+1))},t.listDirChildren=async function(e,t){const a=i.join(e,t);try{return(await n.readdir(a,{withFileTypes:!0})).map(t=>{const n=i.join(a,t.name).slice(e.length+1);return{type:t.isDirectory()?"directory":"file",path:n,name:t.name}})}catch(e){return[]}},t.writeFile=async function(e,t){await n.mkdir(i.dirname(e),{recursive:!0}),await n.writeFile(e,t)},t.deleteFile=async function(e,t){await n.unlink(i.join(e,t)).catch(()=>{})},t.move=async function(e,t){await s(e,t);const a=i.dirname(e),n=i.dirname(t),o=await r(a,"",100);await Promise.all(o.map(e=>s(e,e.replace(a,n))))},t.getUpdateDate=async function(e,t){return n.stat(i.join(e,t)).then(e=>e.mtime).catch(()=>new Date)}},577:e=>{e.exports=require("cors")},669:e=>{e.exports=require("@hapi/joi")},778:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.pathTraversal=void 0;const n=i(a(669)),r=i(a(928));t.pathTraversal=function(e){return n.default.extend({type:"path",base:n.default.string().required(),messages:{"path.invalid":"{{#label}} must resolve to a path under the configured repository"},validate(t,a){if(!r.default.join(e,t).startsWith(e))return{value:t,errors:a.error("path.invalid")}}}).path()}},786:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.getSchema=t.localFsMiddleware=void 0;const n=i(a(928)),r=a(964),s=a(778),o=a(476),l=a(123);function c({repoPath:e,logger:t}){return async function(a,i){try{const{body:r}=a;try{t.debug(`[fs] action=${r.action}`)}catch(e){}switch(r.action){case"info":i.json({repo:n.default.basename(e),publish_modes:["simple"],type:"local_fs"});break;case"entriesByFolder":{const t=r.params,{folder:a,extension:n,depth:s}=t,c=await(0,o.listRepoFiles)(e,a,n,s).then(t=>(0,l.entriesFromFiles)(e,t.map(e=>({path:e}))));i.json(c);break}case"entriesByFiles":{const t=r.params,a=await(0,l.entriesFromFiles)(e,t.files);i.json(a);break}case"getEntry":{const t=r.params,[a]=await(0,l.entriesFromFiles)(e,[{path:t.path}]);i.json(a);break}case"persistEntry":{const{entry:a,dataFiles:s=[a],assets:l}=r.params;try{t.info(`[fs] persistEntry dataFiles=${s.length} assets=${l.length}`)}catch(e){}await Promise.all(s.map(t=>(0,o.writeFile)(n.default.join(e,t.path),t.raw))),await Promise.all(l.map(t=>(0,o.writeFile)(n.default.join(e,t.path),Buffer.from(t.content,t.encoding)))),s.every(e=>e.newPath)&&s.forEach(async t=>{await(0,o.move)(n.default.join(e,t.path),n.default.join(e,t.newPath))});try{t.debug("[fs] persistEntry complete")}catch(e){}i.json({message:"entry persisted"});break}case"getMedia":{const{mediaFolder:a,subpath:s=""}=r.params,c=n.default.join(e,a),d=n.default.normalize(s||"").replace(/^\\+|\/+$/g,"");if(d.includes(".."))return i.status(400).json({error:"Invalid subpath"});const u=n.default.join(c,d);if(!u.startsWith(c))return i.status(400).json({error:"Invalid subpath"});const p=n.default.relative(e,u),h=await(0,o.listDirChildren)(e,p),f=h.filter(e=>"file"===e.type).map(e=>e.path),m=h.filter(e=>"directory"===e.type),g=await Promise.all(f.map(t=>(0,l.readMediaFile)(e,t))),y=m.map(e=>({id:e.path,name:e.name,path:e.path,type:"directory",content:"",encoding:"base64"}));try{t.debug(`[fs] getMedia mediaFolder=${a} subpath=${d} dirs=${m.length} files=${f.length}`)}catch(e){}i.json([...y,...g]);break}case"getMediaFile":{const{path:a}=r.params;try{t.debug(`[fs] getMediaFile path=${a}`)}catch(e){}const n=await(0,l.readMediaFile)(e,a);i.json(n);break}case"persistMedia":{const{asset:a}=r.params;try{t.info(`[fs] persistMedia path=${a.path} bytes=${a.content&&a.content.length||0} encoding=${a.encoding}`)}catch(e){}await(0,o.writeFile)(n.default.join(e,a.path),Buffer.from(a.content,a.encoding));const s=await(0,l.readMediaFile)(e,a.path);try{t.debug("[fs] persistMedia complete")}catch(e){}i.json(s);break}case"deleteFile":{const{path:t}=r.params;await(0,o.deleteFile)(e,t),i.json({message:`deleted file ${t}`});break}case"deleteFiles":{const{paths:t}=r.params;await Promise.all(t.map(t=>(0,o.deleteFile)(e,t))),i.json({message:`deleted files ${t.join(", ")}`});break}case"getDeployPreview":i.json(null);break;default:{const e=`Unknown action ${r.action}`;i.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(a.body)}: ${e instanceof Error?e.message:"Unknown error"}`),i.status(500).json({error:"Unknown error"})}}}function d({repoPath:e}){return(0,r.defaultSchema)({path:(0,s.pathTraversal)(e)})}t.localFsMiddleware=c,t.getSchema=d,t.registerMiddleware=async function(e,t){const{logger:a}=t,i=n.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());e.post("/api/v1",(0,r.joi)(d({repoPath:i}))),e.post("/api/v1",c({repoPath:i,logger:a})),a.info(`Decap CMS File System Proxy Server configured with ${i}`)}},807:e=>{e.exports=require("simple-git")},827:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerCommonMiddlewares=void 0;const n=i(a(252)),r=i(a(96)),s=i(a(577));t.registerCommonMiddlewares=function(e,t){const{logger:a}=t,i={write:e=>{a.debug(String(e).trim())}};e.use((0,r.default)("combined",{stream:i})),e.use((0,s.default)()),e.use(n.default.json({limit:"50mb"}))}},896:e=>{e.exports=require("fs")},928:e=>{e.exports=require("path")},943:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createLogger=void 0;const n=i(a(124)),{combine:r,colorize:s,simple:o}=n.default.format;t.createLogger=function({level:e}){return n.default.createLogger({level:e,format:r(s(),o()),transports:[new n.default.transports.Console]})}},964:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.joi=t.defaultSchema=void 0;const n=i(a(669)),r=["info","entriesByFolder","entriesByFiles","getEntry","unpublishedEntries","unpublishedEntry","unpublishedEntryDataFile","unpublishedEntryMediaFile","deleteUnpublishedEntry","persistEntry","updateUnpublishedEntryStatus","publishUnpublishedEntry","getMedia","getMediaFile","persistMedia","deleteFile","deleteFiles","getDeployPreview"],s=n.default.string().required(),o=n.default.number().required(),l=n.default.bool().required(),c=s,d=s;t.defaultSchema=function({path:e=s}={}){const t=n.default.object({branch:s}),a=n.default.object({path:e,content:s,encoding:s.valid("base64")}),i=n.default.object({slug:s,path:e,raw:s,newPath:e.optional()}),u=n.default.when("action",{switch:[{is:"info",then:n.default.allow()},{is:"entriesByFolder",then:t.keys({folder:e,extension:s,depth:o}).required()},{is:"entriesByFiles",then:t.keys({files:n.default.array().items(n.default.object({path:e,label:n.default.string()})).required()})},{is:"getEntry",then:t.keys({path:e}).required()},{is:"unpublishedEntries",then:t.keys({branch:s}).required()},{is:"unpublishedEntry",then:t.keys({id:n.default.string().optional(),collection:n.default.string().optional(),slug:n.default.string().optional(),cmsLabelPrefix:n.default.string().optional()}).required()},{is:"unpublishedEntryDataFile",then:t.keys({collection:c,slug:d,id:s,path:s}).required()},{is:"unpublishedEntryMediaFile",then:t.keys({collection:c,slug:d,id:s,path:s}).required()},{is:"deleteUnpublishedEntry",then:t.keys({collection:c,slug:d}).required()},{is:"persistEntry",then:t.keys({cmsLabelPrefix:n.default.string().optional(),entry:i,dataFiles:n.default.array().items(i),assets:n.default.array().items(a).required(),options:n.default.object({collectionName:n.default.string(),commitMessage:s,useWorkflow:l,status:s}).required()}).xor("entry","dataFiles").required()},{is:"updateUnpublishedEntryStatus",then:t.keys({collection:c,slug:d,newStatus:s,cmsLabelPrefix:n.default.string().optional()}).required()},{is:"publishUnpublishedEntry",then:t.keys({collection:c,slug:d}).required()},{is:"getMedia",then:t.keys({mediaFolder:e}).required()},{is:"getMediaFile",then:t.keys({path:e}).required()},{is:"persistMedia",then:t.keys({asset:a.required(),options:n.default.object({commitMessage:s}).required()}).required()},{is:"deleteFile",then:t.keys({path:e,options:n.default.object({commitMessage:s}).required()}).required()},{is:"deleteFiles",then:t.keys({paths:n.default.array().items(e).min(1).required(),options:n.default.object({commitMessage:s}).required()}).required()},{is:"getDeployPreview",then:t.keys({collection:c,slug:d}).required()}],otherwise:n.default.forbidden()});return n.default.object({action:n.default.valid(...r).required(),params:u})},t.joi=function(e){return(t,a,i)=>{const{error:n}=e.validate(t.body,{allowUnknown:!0});if(n){const{details:e}=n,t=e.map(e=>e.message).join(",");a.status(422).json({error:t})}else i()}}},971:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.registerMiddleware=t.localGitMiddleware=t.getSchema=t.validateRepo=void 0;const n=i(a(928)),r=a(896),s=a(161),o=a(280),l=i(a(807)),c=a(354),d=a(964),u=a(778),p=a(476),h=a(123);async function f(e,t){await e.add("."),await e.commit(t,void 0,{"--no-verify":null,"--no-gpg-sign":null})}async function m(e){return await e.branchLocal().then(e=>e.current)}async function g(e,t,a){const i=await m(e);try{return i!==t&&await e.checkout(t),await a()}finally{await e.checkout(i)}}function y(e){return`branch.${e}.description`}async function w(e,t,a,i,r){await Promise.all(a.map(e=>(0,p.writeFile)(n.default.join(t,e.path),e.raw))),await Promise.all(i.map(e=>(0,p.writeFile)(n.default.join(t,e.path),Buffer.from(e.content,e.encoding)))),a.every(e=>e.newPath)&&a.forEach(async e=>{await(0,p.move)(n.default.join(t,e.path),n.default.join(t,e.newPath))}),await f(e,r)}async function b(e,t){return await e.branchLocal().then(({all:e})=>e.includes(t))}async function F(e,t,a){const i=await e.diff([t,a]);return(0,o.parse)(i).map(e=>{var t,a;const i=(null===(t=e.oldPath)||void 0===t?void 0:t.replace(/b\//,""))||"",n=(null===(a=e.newPath)||void 0===a?void 0:a.replace(/b\//,""))||"",r=n||i;return{oldPath:i,newPath:n,status:e.status,newFile:"added"===e.status,path:r,id:r,binary:e.binary||/.svg$/.test(r)}})}async function M({repoPath:e}){const t=(0,l.default)(e);if(!await t.checkIsRepo())throw Error(`${e} is not a valid git repository`)}function j({repoPath:e}){return(0,d.defaultSchema)({path:(0,u.pathTraversal)(e)})}function v({repoPath:e,logger:t}){const a=(0,l.default)(e),i=(0,c.withTimeout)(new c.Mutex,3e3,new Error("Request timed out"));return async function(o,l){let c;try{c=await i.acquire();const{body:d}=o;if("info"===d.action)return void l.json({repo:n.default.basename(e),publish_modes:["simple","editorial_workflow"],type:"local_git"});const{branch:u}=d.params;if(!await b(a,u)){const e=`Default branch '${u}' doesn't exist`;return void l.status(422).json({error:e})}switch(d.action){case"entriesByFolder":{const t=d.params,{folder:i,extension:n,depth:r}=t,s=await g(a,u,()=>(0,p.listRepoFiles)(e,i,n,r).then(t=>(0,h.entriesFromFiles)(e,t.map(e=>({path:e})))));l.json(s);break}case"entriesByFiles":{const t=d.params,i=await g(a,u,()=>(0,h.entriesFromFiles)(e,t.files));l.json(i);break}case"getEntry":{const t=d.params,[i]=await g(a,u,()=>(0,h.entriesFromFiles)(e,[{path:t.path}]));l.json(i);break}case"unpublishedEntries":{const e=await a.branchLocal().then(e=>e.all.filter(e=>e.startsWith(`${s.CMS_BRANCH_PREFIX}/`)));l.json(e.map(s.contentKeyFromBranch));break}case"unpublishedEntry":{let{id:t,collection:i,slug:n,cmsLabelPrefix:r}=d.params;t&&({collection:i,slug:n}=(0,s.parseContentKey)(t));const o=(0,s.generateContentKey)(i,n),c=(0,s.branchFromContentKey)(o);if(!await b(a,c))return l.status(404).json({message:"Not Found"});{const t=await F(a,u,c),o=await a.raw(["config",y(c)]),d=o&&(0,s.labelToStatus)(o.trim(),r||""),h=t.length>=0?await g(a,c,async()=>(await Promise.all(t.map(({newPath:t})=>(0,p.getUpdateDate)(e,t)))).reduce((e,t)=>e>t?e:t)):new Date,f={collection:i,slug:n,status:d,diffs:t,updatedAt:h};l.json(f)}break}case"unpublishedEntryDataFile":{const{path:t,collection:i,slug:n}=d.params,r=(0,s.generateContentKey)(i,n),o=(0,s.branchFromContentKey)(r),[c]=await g(a,o,()=>(0,h.entriesFromFiles)(e,[{path:t}]));l.json({data:c.data});break}case"unpublishedEntryMediaFile":{const{path:t,collection:i,slug:n}=d.params,r=(0,s.generateContentKey)(i,n),o=(0,s.branchFromContentKey)(r),c=await g(a,o,()=>(0,h.readMediaFile)(e,t));l.json(c);break}case"deleteUnpublishedEntry":{const{collection:e,slug:t}=d.params,i=(0,s.generateContentKey)(e,t),n=(0,s.branchFromContentKey)(i);await m(a)===n&&await a.checkoutLocalBranch(u),await a.branch(["-D",n]),l.json({message:`deleted branch: ${n}`});break}case"persistEntry":{const{cmsLabelPrefix:i,entry:o,dataFiles:c=[o],assets:p,options:h}=d.params;try{t.info(`[git] persistEntry dataFiles=${c.length} assets=${p.length} useWorkflow=${h.useWorkflow} status=${h.status}`)}catch(e){}if(h.useWorkflow){const t=c[0].slug,o=h.collectionName,l=(0,s.generateContentKey)(o,t),d=(0,s.branchFromContentKey)(l);await g(a,u,async()=>{const t=await b(a,d);t?await a.checkout(d):await a.checkoutLocalBranch(d),await async function(e,t){const a=await e.raw(["config","commit.gpgsign"]);try{"true"===a&&await e.addConfig("commit.gpgsign","false"),await e.rebase([t,"--no-verify"])}finally{"true"===a&&await e.addConfig("commit.gpgsign",a)}}(a,u);const o=(await F(a,u,d)).filter(e=>e.binary&&!p.map(e=>e.path).includes(e.path));if(await Promise.all(o.map(t=>r.promises.unlink(n.default.join(e,t.path)))),await w(a,e,c,p,h.commitMessage),!t){const e=(0,s.statusToLabel)(h.status,i||"");await a.addConfig(y(d),e)}})}else await g(a,u,async()=>{await w(a,e,c,p,h.commitMessage)});try{t.debug("[git] persistEntry complete")}catch(e){}l.json({message:"entry persisted"});break}case"updateUnpublishedEntryStatus":{const{collection:e,slug:t,newStatus:i,cmsLabelPrefix:n}=d.params,r=(0,s.generateContentKey)(e,t),o=(0,s.branchFromContentKey)(r),c=(0,s.statusToLabel)(i,n||"");await a.addConfig(y(o),c),l.json({message:`${u} description was updated to ${c}`});break}case"publishUnpublishedEntry":{const{collection:e,slug:t}=d.params,i=(0,s.generateContentKey)(e,t),n=(0,s.branchFromContentKey)(i);await async function(e,t,a){const i=await e.raw(["config","commit.gpgsign"]);try{"true"===i&&await e.addConfig("commit.gpgsign","false"),await e.mergeFromTo(t,a)}finally{"true"===i&&await e.addConfig("commit.gpgsign",i)}}(a,n,u),await a.deleteLocalBranch(n),l.json({message:`branch ${n} merged to ${u}`});break}case"getMedia":{const{mediaFolder:i,subpath:r=""}=d.params;try{t.debug(`[git] getMedia mediaFolder=${i} subpath=${r}`)}catch(e){}const s=await g(a,u,async()=>{const a=n.default.join(i,r).replace(/^\+|\/+$/g,""),s=await(0,p.listDirChildren)(e,a),o=s.filter(e=>"file"===e.type).map(e=>e.path),l=s.filter(e=>"directory"===e.type),c=await Promise.all(o.map(t=>(0,h.readMediaFile)(e,t))),d=l.map(e=>({id:e.path,name:e.name,path:e.path,type:"directory",content:"",encoding:"base64"}));try{t.debug(`[git] getMedia results dirs=${l.length} files=${o.length}`)}catch(e){}return[...d,...c]});l.json(s);break}case"getMediaFile":{const{path:i}=d.params;try{t.debug(`[git] getMediaFile path=${i}`)}catch(e){}const n=await g(a,u,()=>(0,h.readMediaFile)(e,i));l.json(n);break}case"persistMedia":{const{asset:i,options:{commitMessage:r}}=d.params;try{t.info(`[git] persistMedia path=${i.path} bytes=${i.content&&i.content.length||0} encoding=${i.encoding}`)}catch(e){}const s=await g(a,u,async()=>(await(0,p.writeFile)(n.default.join(e,i.path),Buffer.from(i.content,i.encoding)),await f(a,r),(0,h.readMediaFile)(e,i.path)));try{t.debug("[git] persistMedia complete")}catch(e){}l.json(s);break}case"deleteFile":{const{path:t,options:{commitMessage:i}}=d.params;await g(a,u,async()=>{await(0,p.deleteFile)(e,t),await f(a,i)}),l.json({message:`deleted file ${t}`});break}case"deleteFiles":{const{paths:t,options:{commitMessage:i}}=d.params;await g(a,u,async()=>{await Promise.all(t.map(t=>(0,p.deleteFile)(e,t))),await f(a,i)}),l.json({message:`deleted files ${t.join(", ")}`});break}case"getDeployPreview":l.json(null);break;default:{const e=`Unknown action ${d.action}`;l.status(422).json({error:e});break}}}catch(e){t.error(`Error handling ${JSON.stringify(o.body)}: ${e instanceof Error?e.message:"Unknown error"}`),l.status(500).json({error:"Unknown error"})}finally{c&&c()}}}t.validateRepo=M,t.getSchema=j,t.localGitMiddleware=v,t.registerMiddleware=async function(e,t){const{logger:a}=t,i=n.default.resolve(process.env.GIT_REPO_DIRECTORY||process.cwd());await M({repoPath:i}),e.post("/api/v1",(0,d.joi)(j({repoPath:i}))),e.post("/api/v1",v({repoPath:i,logger:a})),a.info(`Decap CMS Git Proxy Server configured with ${i}`)}},982:e=>{e.exports=require("crypto")}},t={};function a(i){var n=t[i];if(void 0!==n)return n.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,a),r.exports}var i={};(()=>{var e=i;Object.defineProperty(e,"__esModule",{value:!0}),e.registerLocalFs=e.registerLocalGit=void 0;const t=a(827),n=a(971),r=a(786),s=a(943);function o(e){return{logger:(0,s.createLogger)({level:e.logLevel||"info"})}}e.registerLocalGit=async function(e,a={}){const i=o(a);(0,t.registerCommonMiddlewares)(e,i),await(0,n.registerMiddleware)(e,i)},e.registerLocalFs=async function(e,a={}){const i=o(a);(0,t.registerCommonMiddlewares)(e,i),await(0,r.registerMiddleware)(e,i)}})(),module.exports=i})();
//# sourceMappingURL=middlewares.js.map