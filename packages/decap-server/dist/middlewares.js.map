{"version":3,"file":"middlewares.js","mappings":"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","sources":["webpack://decap-server/external commonjs \"morgan\"","webpack://decap-server/./src/middlewares/utils/entries.ts","webpack://decap-server/external commonjs \"winston\"","webpack://decap-server/../decap-cms-lib-util/src/APIUtils.ts","webpack://decap-server/external commonjs \"express\"","webpack://decap-server/external commonjs \"what-the-diff\"","webpack://decap-server/external commonjs \"async-mutex\"","webpack://decap-server/./src/middlewares/utils/fs.ts","webpack://decap-server/external commonjs \"cors\"","webpack://decap-server/external commonjs \"@hapi/joi\"","webpack://decap-server/./src/middlewares/joi/customValidators.ts","webpack://decap-server/./src/middlewares/localFs/index.ts","webpack://decap-server/external commonjs \"simple-git\"","webpack://decap-server/./src/middlewares/common/index.ts","webpack://decap-server/external node-commonjs \"fs\"","webpack://decap-server/external node-commonjs \"path\"","webpack://decap-server/./src/logger.ts","webpack://decap-server/./src/middlewares/joi/index.ts","webpack://decap-server/./src/middlewares/localGit/index.ts","webpack://decap-server/external node-commonjs \"crypto\"","webpack://decap-server/webpack/bootstrap","webpack://decap-server/./src/middlewares.ts"],"sourcesContent":["module.exports = require(\"morgan\");","import crypto from 'crypto';\nimport path from 'path';\nimport { promises as fs } from 'fs';\n\nfunction sha256(buffer: Buffer) {\n  return crypto.createHash('sha256').update(buffer).digest('hex');\n}\n\n// normalize windows os path format\nfunction normalizePath(path: string) {\n  return path.replace(/\\\\/g, '/');\n}\n\nexport async function entriesFromFiles(\n  repoPath: string,\n  files: { path: string; label?: string }[],\n) {\n  return Promise.all(\n    files.map(async file => {\n      try {\n        const content = await fs.readFile(path.join(repoPath, file.path));\n        return {\n          data: content.toString(),\n          file: { path: normalizePath(file.path), label: file.label, id: sha256(content) },\n        };\n      } catch (e) {\n        return {\n          data: null,\n          file: { path: normalizePath(file.path), label: file.label, id: null },\n        };\n      }\n    }),\n  );\n}\n\nexport async function readMediaFile(repoPath: string, file: string) {\n  const encoding = 'base64';\n  const buffer = await fs.readFile(path.join(repoPath, file));\n  const id = sha256(buffer);\n\n  return {\n    id,\n    content: buffer.toString(encoding),\n    encoding,\n    path: normalizePath(file),\n    name: path.basename(file),\n  };\n}\n","module.exports = require(\"winston\");","export const CMS_BRANCH_PREFIX = 'cms';\nexport const DEFAULT_PR_BODY = 'Automatically generated by Decap CMS';\nexport const MERGE_COMMIT_MESSAGE = 'Automatically generated. Merged on Decap CMS.';\n\nconst DEFAULT_DECAP_CMS_LABEL_PREFIX = 'decap-cms/';\n\nfunction getLabelPrefix(labelPrefix: string) {\n  return labelPrefix || DEFAULT_DECAP_CMS_LABEL_PREFIX;\n}\n\nexport function isCMSLabel(label: string, labelPrefix: string) {\n  return label.startsWith(getLabelPrefix(labelPrefix));\n}\n\nexport function labelToStatus(label: string, labelPrefix: string) {\n  return label.slice(getLabelPrefix(labelPrefix).length);\n}\n\nexport function statusToLabel(status: string, labelPrefix: string) {\n  return `${getLabelPrefix(labelPrefix)}${status}`;\n}\n\nexport function generateContentKey(collectionName: string, slug: string) {\n  return `${collectionName}/${slug}`;\n}\n\nexport function parseContentKey(contentKey: string) {\n  const index = contentKey.indexOf('/');\n  return { collection: contentKey.slice(0, index), slug: contentKey.slice(index + 1) };\n}\n\nexport function contentKeyFromBranch(branch: string) {\n  return branch.slice(`${CMS_BRANCH_PREFIX}/`.length);\n}\n\nexport function branchFromContentKey(contentKey: string) {\n  return `${CMS_BRANCH_PREFIX}/${contentKey}`;\n}\n","module.exports = require(\"express\");","module.exports = require(\"what-the-diff\");","module.exports = require(\"async-mutex\");","/* eslint-disable @typescript-eslint/no-explicit-any */\ndeclare const require: any;\nconst path = require('path');\nconst fs = require('fs').promises;\n\nasync function listFiles(dir: string, extension: string, depth: number): Promise<string[]> {\n  if (depth <= 0) {\n    return [];\n  }\n\n  try {\n    const dirents = await fs.readdir(dir, { withFileTypes: true });\n    const files = await Promise.all(\n      dirents.map((dirent: any) => {\n        const res = path.join(dir, dirent.name);\n        return dirent.isDirectory()\n          ? listFiles(res, extension, depth - 1)\n          : [res].filter(f => f.endsWith(extension));\n      }),\n    );\n    return ([] as string[]).concat(...files);\n  } catch (e) {\n    return [];\n  }\n}\n\nexport async function listRepoFiles(\n  repoPath: string,\n  folder: string,\n  extension: string,\n  depth: number,\n) {\n  const abs = path.join(repoPath, folder);\n  const files = await listFiles(abs, extension, depth);\n  return files.map(f => f.slice(repoPath.length + 1));\n}\n\n// List one-level children (files and directories) under a target folder relative to repoPath\nexport async function listDirChildren(\n  repoPath: string,\n  targetRelativeFolder: string,\n): Promise<{ type: 'file' | 'directory'; path: string; name: string }[]> {\n  const abs = path.join(repoPath, targetRelativeFolder);\n  try {\n    const dirents = await fs.readdir(abs, { withFileTypes: true });\n    return dirents.map((dirent: any) => {\n      const absChild = path.join(abs, dirent.name);\n      const relPath = absChild.slice(repoPath.length + 1);\n      return { type: dirent.isDirectory() ? 'directory' : 'file', path: relPath, name: dirent.name };\n    });\n  } catch (e) {\n    return [];\n  }\n}\n\nexport async function writeFile(filePath: string, content: any) {\n  await fs.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, content);\n}\n\nexport async function deleteFile(repoPath: string, filePath: string) {\n  await fs.unlink(path.join(repoPath, filePath)).catch(() => undefined);\n}\n\nasync function moveFile(from: string, to: string) {\n  await fs.mkdir(path.dirname(to), { recursive: true });\n  await fs.rename(from, to);\n}\n\nexport async function move(from: string, to: string) {\n  // move file\n  await moveFile(from, to);\n\n  // move children\n  const sourceDir = path.dirname(from);\n  const destDir = path.dirname(to);\n  const allFiles = await listFiles(sourceDir, '', 100);\n  await Promise.all(allFiles.map(file => moveFile(file, file.replace(sourceDir, destDir))));\n}\n\nexport async function getUpdateDate(repoPath: string, filePath: string) {\n  return fs\n    .stat(path.join(repoPath, filePath))\n    .then((stat: any) => stat.mtime)\n    .catch(() => new Date());\n}\n","module.exports = require(\"cors\");","module.exports = require(\"@hapi/joi\");","import Joi from '@hapi/joi';\nimport path from 'path';\n\nexport function pathTraversal(repoPath: string) {\n  return Joi.extend({\n    type: 'path',\n    base: Joi.string().required(),\n    messages: {\n      'path.invalid': '{{#label}} must resolve to a path under the configured repository',\n    },\n    validate(value, helpers) {\n      const resolvedPath = path.join(repoPath, value);\n      if (!resolvedPath.startsWith(repoPath)) {\n        return { value, errors: helpers.error('path.invalid') };\n      }\n    },\n  }).path();\n}\n","import path from 'path';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, deleteFile, writeFile, move, listDirChildren } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  GetMediaFileParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  DeleteFilesParams,\n  DataFile,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\n\ntype FsOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nexport function localFsMiddleware({ repoPath, logger }: FsOptions) {\n  return async function (req: express.Request, res: express.Response) {\n    try {\n      const { body } = req;\n\n      switch (body.action) {\n        case 'info': {\n          res.json({\n            repo: path.basename(repoPath),\n            publish_modes: ['simple'],\n            type: 'local_fs',\n          });\n          break;\n        }\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await listRepoFiles(repoPath, folder, extension, depth).then(files =>\n            entriesFromFiles(\n              repoPath,\n              files.map(file => ({ path: file })),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await entriesFromFiles(repoPath, payload.files);\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await entriesFromFiles(repoPath, [{ path: payload.path }]);\n          res.json(entry);\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n          } = body.params as PersistEntryParams;\n          await Promise.all(\n            dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n          );\n          // save assets\n          await Promise.all(\n            assets.map(a =>\n              writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding)),\n            ),\n          );\n          if (dataFiles.every(dataFile => dataFile.newPath)) {\n            dataFiles.forEach(async dataFile => {\n              await move(\n                path.join(repoPath, dataFile.path),\n                path.join(repoPath, dataFile.newPath!),\n              );\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder, subpath = '' } = body.params as GetMediaParams & { subpath?: string };\n          const root = path.join(repoPath, mediaFolder);\n          const norm = path.normalize(subpath || '').replace(/^\\\\+|\\/+$/g, '');\n          if (norm.includes('..')) {\n            return res.status(400).json({ error: 'Invalid subpath' });\n          }\n          const target = path.join(root, norm);\n          if (!target.startsWith(root)) {\n            return res.status(400).json({ error: 'Invalid subpath' });\n          }\n          const relTarget = path.relative(repoPath, target);\n          // one-level list of directories and files\n          const children = await listDirChildren(repoPath, relTarget);\n          const files = children.filter(c => c.type === 'file').map(c => c.path);\n          const dirs = children.filter(c => c.type === 'directory');\n          const serializedFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n          const dirEntries = dirs.map(d => ({\n            id: d.path,\n            name: d.name,\n            path: d.path,\n            type: 'directory',\n            content: '',\n            encoding: 'base64',\n          }));\n          res.json([...dirEntries, ...serializedFiles]);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await readMediaFile(repoPath, path);\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const { asset } = body.params as PersistMediaParams;\n          await writeFile(\n            path.join(repoPath, asset.path),\n            Buffer.from(asset.content, asset.encoding),\n          );\n          const file = await readMediaFile(repoPath, asset.path);\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const { path: filePath } = body.params as DeleteFileParams;\n          await deleteFile(repoPath, filePath);\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const { paths } = body.params as DeleteFilesParams;\n          await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(\n        `Error handling ${JSON.stringify(req.body)}: ${\n          e instanceof Error ? e.message : 'Unknown error'\n        }`,\n      );\n      res.status(500).json({ error: 'Unknown error' });\n    }\n  };\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localFsMiddleware({ repoPath, logger }));\n  logger.info(`Decap CMS File System Proxy Server configured with ${repoPath}`);\n}\n","module.exports = require(\"simple-git\");","import express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nimport type winston from 'winston';\n\nexport type Options = {\n  logger: winston.Logger;\n};\n\nexport function registerCommonMiddlewares(app: express.Express, options: Options) {\n  const { logger } = options;\n  const stream = {\n    write: (message: string) => {\n      logger.debug(String(message).trim());\n    },\n  };\n  app.use(morgan('combined', { stream }));\n  app.use(cors());\n  app.use(express.json({ limit: '50mb' }));\n}\n","module.exports = require(\"fs\");","module.exports = require(\"path\");","import winston from 'winston';\n\nconst { combine, colorize, simple } = winston.format;\n\ntype LogOptions = {\n  level: string;\n};\n\nexport function createLogger({ level }: LogOptions) {\n  return winston.createLogger({\n    level,\n    format: combine(colorize(), simple()),\n    transports: [new winston.transports.Console()],\n  });\n}\n","import Joi from '@hapi/joi';\n\nimport type express from 'express';\n\nconst allowedActions = [\n  'info',\n  'entriesByFolder',\n  'entriesByFiles',\n  'getEntry',\n  'unpublishedEntries',\n  'unpublishedEntry',\n  'unpublishedEntryDataFile',\n  'unpublishedEntryMediaFile',\n  'deleteUnpublishedEntry',\n  'persistEntry',\n  'updateUnpublishedEntryStatus',\n  'publishUnpublishedEntry',\n  'getMedia',\n  'getMediaFile',\n  'persistMedia',\n  'deleteFile',\n  'deleteFiles',\n  'getDeployPreview',\n];\n\nconst requiredString = Joi.string().required();\nconst requiredNumber = Joi.number().required();\nconst requiredBool = Joi.bool().required();\n\nconst collection = requiredString;\nconst slug = requiredString;\n\nexport function defaultSchema({ path = requiredString } = {}) {\n  const defaultParams = Joi.object({\n    branch: requiredString,\n  });\n\n  const asset = Joi.object({\n    path,\n    content: requiredString,\n    encoding: requiredString.valid('base64'),\n  });\n\n  const dataFile = Joi.object({\n    slug: requiredString,\n    path,\n    raw: requiredString,\n    newPath: path.optional(),\n  });\n\n  const params = Joi.when('action', {\n    switch: [\n      {\n        is: 'info',\n        then: Joi.allow(),\n      },\n      {\n        is: 'entriesByFolder',\n        then: defaultParams\n          .keys({\n            folder: path,\n            extension: requiredString,\n            depth: requiredNumber,\n          })\n          .required(),\n      },\n      {\n        is: 'entriesByFiles',\n        then: defaultParams.keys({\n          files: Joi.array()\n            .items(Joi.object({ path, label: Joi.string() }))\n            .required(),\n        }),\n      },\n      {\n        is: 'getEntry',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntries',\n        then: defaultParams.keys({ branch: requiredString }).required(),\n      },\n      {\n        is: 'unpublishedEntry',\n        then: defaultParams\n          .keys({\n            id: Joi.string().optional(),\n            collection: Joi.string().optional(),\n            slug: Joi.string().optional(),\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryDataFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'unpublishedEntryMediaFile',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            id: requiredString,\n            path: requiredString,\n          })\n          .required(),\n      },\n      {\n        is: 'deleteUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'persistEntry',\n        then: defaultParams\n          .keys({\n            cmsLabelPrefix: Joi.string().optional(),\n            entry: dataFile, // entry is kept for backwards compatibility\n            dataFiles: Joi.array().items(dataFile),\n            assets: Joi.array().items(asset).required(),\n            options: Joi.object({\n              collectionName: Joi.string(),\n              commitMessage: requiredString,\n              useWorkflow: requiredBool,\n              status: requiredString,\n            }).required(),\n          })\n          .xor('entry', 'dataFiles')\n          .required(),\n      },\n      {\n        is: 'updateUnpublishedEntryStatus',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n            newStatus: requiredString,\n            cmsLabelPrefix: Joi.string().optional(),\n          })\n          .required(),\n      },\n      {\n        is: 'publishUnpublishedEntry',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n      {\n        is: 'getMedia',\n        then: defaultParams\n          .keys({\n            mediaFolder: path,\n          })\n          .required(),\n      },\n      {\n        is: 'getMediaFile',\n        then: defaultParams\n          .keys({\n            path,\n          })\n          .required(),\n      },\n      {\n        is: 'persistMedia',\n        then: defaultParams\n          .keys({\n            asset: asset.required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFile',\n        then: defaultParams\n          .keys({\n            path,\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'deleteFiles',\n        then: defaultParams\n          .keys({\n            paths: Joi.array().items(path).min(1).required(),\n            options: Joi.object({\n              commitMessage: requiredString,\n            }).required(),\n          })\n          .required(),\n      },\n      {\n        is: 'getDeployPreview',\n        then: defaultParams\n          .keys({\n            collection,\n            slug,\n          })\n          .required(),\n      },\n    ],\n    otherwise: Joi.forbidden(),\n  });\n\n  return Joi.object({\n    action: Joi.valid(...allowedActions).required(),\n    params,\n  });\n}\n\nexport function joi(schema: Joi.Schema) {\n  return (req: express.Request, res: express.Response, next: express.NextFunction) => {\n    const { error } = schema.validate(req.body, { allowUnknown: true });\n    if (error) {\n      const { details } = error;\n      const message = details.map(i => i.message).join(',');\n      res.status(422).json({ error: message });\n    } else {\n      next();\n    }\n  };\n}\n","import path from 'path';\nimport { promises as fs } from 'fs';\nimport {\n  branchFromContentKey,\n  generateContentKey,\n  contentKeyFromBranch,\n  CMS_BRANCH_PREFIX,\n  statusToLabel,\n  labelToStatus,\n  parseContentKey,\n} from 'decap-cms-lib-util/src/APIUtils';\nimport { parse } from 'what-the-diff';\n// eslint-disable-next-line import/no-named-as-default\nimport simpleGit from 'simple-git';\nimport { Mutex, withTimeout } from 'async-mutex';\n\nimport { defaultSchema, joi } from '../joi';\nimport { pathTraversal } from '../joi/customValidators';\nimport { listRepoFiles, writeFile, move, deleteFile, getUpdateDate, listDirChildren } from '../utils/fs';\nimport { entriesFromFiles, readMediaFile } from '../utils/entries';\n\nimport type {\n  EntriesByFolderParams,\n  EntriesByFilesParams,\n  GetEntryParams,\n  DefaultParams,\n  UnpublishedEntryParams,\n  PersistEntryParams,\n  GetMediaParams,\n  Asset,\n  PublishUnpublishedEntryParams,\n  PersistMediaParams,\n  DeleteFileParams,\n  UpdateUnpublishedEntryStatusParams,\n  DataFile,\n  GetMediaFileParams,\n  DeleteEntryParams,\n  DeleteFilesParams,\n  UnpublishedEntryDataFileParams,\n  UnpublishedEntryMediaFileParams,\n} from '../types';\nimport type express from 'express';\nimport type winston from 'winston';\nimport type { SimpleGit } from 'simple-git';\n\nasync function commit(git: SimpleGit, commitMessage: string) {\n  await git.add('.');\n  await git.commit(commitMessage, undefined, {\n    // setting the value to a string passes name=value\n    // any other value passes just the key\n    '--no-verify': null,\n    '--no-gpg-sign': null,\n  });\n}\n\nasync function getCurrentBranch(git: SimpleGit) {\n  const currentBranch = await git.branchLocal().then(summary => summary.current);\n  return currentBranch;\n}\n\nasync function runOnBranch<T>(git: SimpleGit, branch: string, func: () => Promise<T>) {\n  const currentBranch = await getCurrentBranch(git);\n  try {\n    if (currentBranch !== branch) {\n      await git.checkout(branch);\n    }\n    const result = await func();\n    return result;\n  } finally {\n    await git.checkout(currentBranch);\n  }\n}\n\nfunction branchDescription(branch: string) {\n  return `branch.${branch}.description`;\n}\n\ntype GitOptions = {\n  repoPath: string;\n  logger: winston.Logger;\n};\n\nasync function commitEntry(\n  git: SimpleGit,\n  repoPath: string,\n  dataFiles: DataFile[],\n  assets: Asset[],\n  commitMessage: string,\n) {\n  // save entry content\n  await Promise.all(\n    dataFiles.map(dataFile => writeFile(path.join(repoPath, dataFile.path), dataFile.raw)),\n  );\n  // save assets\n  await Promise.all(\n    assets.map(a => writeFile(path.join(repoPath, a.path), Buffer.from(a.content, a.encoding))),\n  );\n  if (dataFiles.every(dataFile => dataFile.newPath)) {\n    dataFiles.forEach(async dataFile => {\n      await move(path.join(repoPath, dataFile.path), path.join(repoPath, dataFile.newPath!));\n    });\n  }\n\n  // commits files\n  await commit(git, commitMessage);\n}\n\nasync function rebase(git: SimpleGit, branch: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.rebase([branch, '--no-verify']);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function merge(git: SimpleGit, from: string, to: string) {\n  const gpgSign = await git.raw(['config', 'commit.gpgsign']);\n  try {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', 'false');\n    }\n    await git.mergeFromTo(from, to);\n  } finally {\n    if (gpgSign === 'true') {\n      await git.addConfig('commit.gpgsign', gpgSign);\n    }\n  }\n}\n\nasync function isBranchExists(git: SimpleGit, branch: string) {\n  const branchExists = await git.branchLocal().then(({ all }) => all.includes(branch));\n  return branchExists;\n}\n\nasync function getDiffs(git: SimpleGit, source: string, dest: string) {\n  const rawDiff = await git.diff([source, dest]);\n  const diffs = parse(rawDiff).map(d => {\n    const oldPath = d.oldPath?.replace(/b\\//, '') || '';\n    const newPath = d.newPath?.replace(/b\\//, '') || '';\n    const path = newPath || (oldPath as string);\n    return {\n      oldPath,\n      newPath,\n      status: d.status,\n      newFile: d.status === 'added',\n      path,\n      id: path,\n      binary: d.binary || /.svg$/.test(path),\n    };\n  });\n  return diffs;\n}\n\nexport async function validateRepo({ repoPath }: { repoPath: string }) {\n  const git = simpleGit(repoPath);\n  const isRepo = await git.checkIsRepo();\n  if (!isRepo) {\n    throw Error(`${repoPath} is not a valid git repository`);\n  }\n}\n\nexport function getSchema({ repoPath }: { repoPath: string }) {\n  const schema = defaultSchema({ path: pathTraversal(repoPath) });\n  return schema;\n}\n\nexport function localGitMiddleware({ repoPath, logger }: GitOptions) {\n  const git = simpleGit(repoPath);\n\n  // we can only perform a single git operation at any given time\n  const mutex = withTimeout(new Mutex(), 3000, new Error('Request timed out'));\n\n  return async function (req: express.Request, res: express.Response) {\n    let release;\n    try {\n      release = await mutex.acquire();\n      const { body } = req;\n      if (body.action === 'info') {\n        res.json({\n          repo: path.basename(repoPath),\n          publish_modes: ['simple', 'editorial_workflow'],\n          type: 'local_git',\n        });\n        return;\n      }\n      const { branch } = body.params as DefaultParams;\n\n      const branchExists = await isBranchExists(git, branch);\n      if (!branchExists) {\n        const message = `Default branch '${branch}' doesn't exist`;\n        res.status(422).json({ error: message });\n        return;\n      }\n\n      switch (body.action) {\n        case 'entriesByFolder': {\n          const payload = body.params as EntriesByFolderParams;\n          const { folder, extension, depth } = payload;\n          const entries = await runOnBranch(git, branch, () =>\n            listRepoFiles(repoPath, folder, extension, depth).then(files =>\n              entriesFromFiles(\n                repoPath,\n                files.map(file => ({ path: file })),\n              ),\n            ),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'entriesByFiles': {\n          const payload = body.params as EntriesByFilesParams;\n          const entries = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, payload.files),\n          );\n          res.json(entries);\n          break;\n        }\n        case 'getEntry': {\n          const payload = body.params as GetEntryParams;\n          const [entry] = await runOnBranch(git, branch, () =>\n            entriesFromFiles(repoPath, [{ path: payload.path }]),\n          );\n          res.json(entry);\n          break;\n        }\n        case 'unpublishedEntries': {\n          const cmsBranches = await git\n            .branchLocal()\n            .then(result => result.all.filter(b => b.startsWith(`${CMS_BRANCH_PREFIX}/`)));\n          res.json(cmsBranches.map(contentKeyFromBranch));\n          break;\n        }\n        case 'unpublishedEntry': {\n          let { id, collection, slug, cmsLabelPrefix } = body.params as UnpublishedEntryParams;\n          if (id) {\n            ({ collection, slug } = parseContentKey(id));\n          }\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const branchExists = await isBranchExists(git, cmsBranch);\n          if (branchExists) {\n            const diffs = await getDiffs(git, branch, cmsBranch);\n            const label = await git.raw(['config', branchDescription(cmsBranch)]);\n            const status = label && labelToStatus(label.trim(), cmsLabelPrefix || '');\n            const updatedAt =\n              diffs.length >= 0\n                ? await runOnBranch(git, cmsBranch, async () => {\n                    const dates = await Promise.all(\n                      diffs.map(({ newPath }) => getUpdateDate(repoPath, newPath)),\n                    );\n                    return dates.reduce((a, b) => {\n                      return a > b ? a : b;\n                    });\n                  })\n                : new Date();\n            const unpublishedEntry = {\n              collection,\n              slug,\n              status,\n              diffs,\n              updatedAt,\n            };\n            res.json(unpublishedEntry);\n          } else {\n            return res.status(404).json({ message: 'Not Found' });\n          }\n          break;\n        }\n        case 'unpublishedEntryDataFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryDataFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const [entry] = await runOnBranch(git, cmsBranch, () =>\n            entriesFromFiles(repoPath, [{ path }]),\n          );\n          res.json({ data: entry.data });\n          break;\n        }\n        case 'unpublishedEntryMediaFile': {\n          const { path, collection, slug } = body.params as UnpublishedEntryMediaFileParams;\n          const contentKey = generateContentKey(collection as string, slug as string);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const file = await runOnBranch(git, cmsBranch, () => readMediaFile(repoPath, path));\n          res.json(file);\n          break;\n        }\n        case 'deleteUnpublishedEntry': {\n          const { collection, slug } = body.params as DeleteEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const currentBranch = await getCurrentBranch(git);\n          if (currentBranch === cmsBranch) {\n            await git.checkoutLocalBranch(branch);\n          }\n          await git.branch(['-D', cmsBranch]);\n          res.json({ message: `deleted branch: ${cmsBranch}` });\n          break;\n        }\n        case 'persistEntry': {\n          const {\n            cmsLabelPrefix,\n            entry,\n            dataFiles = [entry as DataFile],\n            assets,\n            options,\n          } = body.params as PersistEntryParams;\n\n          if (!options.useWorkflow) {\n            await runOnBranch(git, branch, async () => {\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n            });\n          } else {\n            const slug = dataFiles[0].slug;\n            const collection = options.collectionName as string;\n            const contentKey = generateContentKey(collection, slug);\n            const cmsBranch = branchFromContentKey(contentKey);\n            await runOnBranch(git, branch, async () => {\n              const branchExists = await isBranchExists(git, cmsBranch);\n              if (branchExists) {\n                await git.checkout(cmsBranch);\n              } else {\n                await git.checkoutLocalBranch(cmsBranch);\n              }\n              await rebase(git, branch);\n              const diffs = await getDiffs(git, branch, cmsBranch);\n              // delete media files that have been removed from the entry\n              const toDelete = diffs.filter(\n                d => d.binary && !assets.map(a => a.path).includes(d.path),\n              );\n              await Promise.all(toDelete.map(f => fs.unlink(path.join(repoPath, f.path))));\n              await commitEntry(git, repoPath, dataFiles, assets, options.commitMessage);\n\n              // add status for new entries\n              if (!branchExists) {\n                const description = statusToLabel(options.status, cmsLabelPrefix || '');\n                await git.addConfig(branchDescription(cmsBranch), description);\n              }\n            });\n          }\n          res.json({ message: 'entry persisted' });\n          break;\n        }\n        case 'updateUnpublishedEntryStatus': {\n          const { collection, slug, newStatus, cmsLabelPrefix } =\n            body.params as UpdateUnpublishedEntryStatusParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          const description = statusToLabel(newStatus, cmsLabelPrefix || '');\n          await git.addConfig(branchDescription(cmsBranch), description);\n          res.json({ message: `${branch} description was updated to ${description}` });\n          break;\n        }\n        case 'publishUnpublishedEntry': {\n          const { collection, slug } = body.params as PublishUnpublishedEntryParams;\n          const contentKey = generateContentKey(collection, slug);\n          const cmsBranch = branchFromContentKey(contentKey);\n          await merge(git, cmsBranch, branch);\n          await git.deleteLocalBranch(cmsBranch);\n          res.json({ message: `branch ${cmsBranch} merged to ${branch}` });\n          break;\n        }\n        case 'getMedia': {\n          const { mediaFolder, subpath = '' } = body.params as GetMediaParams & { subpath?: string };\n          const mediaFiles = await runOnBranch(git, branch, async () => {\n            const targetRelative = path.join(mediaFolder, subpath).replace(/^\\\\+|\\/+$/g, '');\n            const children = await listDirChildren(repoPath, targetRelative);\n            const files = children.filter(c => c.type === 'file').map(c => c.path);\n            const dirs = children.filter(c => c.type === 'directory');\n            const serializedFiles = await Promise.all(files.map(file => readMediaFile(repoPath, file)));\n            const dirEntries = dirs.map(d => ({\n              id: d.path,\n              name: d.name,\n              path: d.path,\n              type: 'directory',\n              content: '',\n              encoding: 'base64',\n            }));\n            return [...dirEntries, ...serializedFiles];\n          });\n          res.json(mediaFiles);\n          break;\n        }\n        case 'getMediaFile': {\n          const { path } = body.params as GetMediaFileParams;\n          const mediaFile = await runOnBranch(git, branch, () => {\n            return readMediaFile(repoPath, path);\n          });\n          res.json(mediaFile);\n          break;\n        }\n        case 'persistMedia': {\n          const {\n            asset,\n            options: { commitMessage },\n          } = body.params as PersistMediaParams;\n\n          const file = await runOnBranch(git, branch, async () => {\n            await writeFile(\n              path.join(repoPath, asset.path),\n              Buffer.from(asset.content, asset.encoding),\n            );\n            await commit(git, commitMessage);\n            return readMediaFile(repoPath, asset.path);\n          });\n          res.json(file);\n          break;\n        }\n        case 'deleteFile': {\n          const {\n            path: filePath,\n            options: { commitMessage },\n          } = body.params as DeleteFileParams;\n          await runOnBranch(git, branch, async () => {\n            await deleteFile(repoPath, filePath);\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted file ${filePath}` });\n          break;\n        }\n        case 'deleteFiles': {\n          const {\n            paths,\n            options: { commitMessage },\n          } = body.params as DeleteFilesParams;\n          await runOnBranch(git, branch, async () => {\n            await Promise.all(paths.map(filePath => deleteFile(repoPath, filePath)));\n            await commit(git, commitMessage);\n          });\n          res.json({ message: `deleted files ${paths.join(', ')}` });\n          break;\n        }\n        case 'getDeployPreview': {\n          res.json(null);\n          break;\n        }\n        default: {\n          const message = `Unknown action ${body.action}`;\n          res.status(422).json({ error: message });\n          break;\n        }\n      }\n    } catch (e) {\n      logger.error(\n        `Error handling ${JSON.stringify(req.body)}: ${\n          e instanceof Error ? e.message : 'Unknown error'\n        }`,\n      );\n      res.status(500).json({ error: 'Unknown error' });\n    } finally {\n      release && release();\n    }\n  };\n}\n\ntype Options = {\n  logger: winston.Logger;\n};\n\nexport async function registerMiddleware(app: express.Express, options: Options) {\n  const { logger } = options;\n  const repoPath = path.resolve(process.env.GIT_REPO_DIRECTORY || process.cwd());\n  await validateRepo({ repoPath });\n  app.post('/api/v1', joi(getSchema({ repoPath })));\n  app.post('/api/v1', localGitMiddleware({ repoPath, logger }));\n  logger.info(`Decap CMS Git Proxy Server configured with ${repoPath}`);\n}\n","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { registerCommonMiddlewares } from './middlewares/common';\nimport { registerMiddleware as localGit } from './middlewares/localGit';\nimport { registerMiddleware as localFs } from './middlewares/localFs';\nimport { createLogger } from './logger';\n\nimport type express from 'express';\n\ntype Options = {\n  logLevel?: string;\n};\n\nfunction createOptions(options: Options) {\n  return {\n    logger: createLogger({ level: options.logLevel || 'info' }),\n  };\n}\n\nexport async function registerLocalGit(app: express.Express, options: Options = {}) {\n  const opts = createOptions(options);\n  registerCommonMiddlewares(app, opts);\n  await localGit(app, opts);\n}\n\nexport async function registerLocalFs(app: express.Express, options: Options = {}) {\n  const opts = createOptions(options);\n  registerCommonMiddlewares(app, opts);\n  await localFs(app, opts);\n}\n"],"names":["module","exports","require","sha256","buffer","createHash","update","digest","normalizePath","path","replace","async","repoPath","files","Promise","all","map","file","content","readFile","join","data","toString","label","id","e","encoding","name","basename","getLabelPrefix","labelPrefix","CMS_BRANCH_PREFIX","DEFAULT_PR_BODY","MERGE_COMMIT_MESSAGE","startsWith","slice","length","status","collectionName","slug","contentKey","index","indexOf","collection","branch","fs","listFiles","dir","extension","depth","dirents","readdir","withFileTypes","dirent","res","isDirectory","filter","f","endsWith","concat","moveFile","from","to","mkdir","dirname","recursive","rename","folder","abs","targetRelativeFolder","relPath","type","filePath","writeFile","unlink","catch","sourceDir","destDir","allFiles","stat","then","mtime","Date","extend","base","string","required","messages","validate","value","helpers","errors","error","localFsMiddleware","logger","req","body","action","json","repo","publish_modes","payload","params","entries","listRepoFiles","entriesFromFiles","entry","dataFiles","assets","dataFile","raw","a","Buffer","every","newPath","forEach","move","message","mediaFolder","subpath","root","norm","normalize","includes","target","relTarget","relative","children","listDirChildren","c","dirs","serializedFiles","readMediaFile","dirEntries","d","mediaFile","asset","deleteFile","paths","JSON","stringify","Error","getSchema","defaultSchema","pathTraversal","app","options","resolve","process","env","GIT_REPO_DIRECTORY","cwd","post","joi","info","stream","write","debug","String","trim","use","limit","combine","colorize","simple","format","level","createLogger","transports","Console","allowedActions","requiredString","requiredNumber","number","requiredBool","bool","defaultParams","object","valid","optional","when","switch","is","allow","keys","array","items","cmsLabelPrefix","commitMessage","useWorkflow","xor","newStatus","min","otherwise","forbidden","schema","next","allowUnknown","details","i","commit","git","add","undefined","getCurrentBranch","branchLocal","summary","current","runOnBranch","func","currentBranch","checkout","branchDescription","commitEntry","isBranchExists","getDiffs","source","dest","rawDiff","diff","parse","oldPath","newFile","binary","test","validateRepo","checkIsRepo","localGitMiddleware","mutex","withTimeout","Mutex","release","acquire","cmsBranches","result","b","contentKeyFromBranch","parseContentKey","generateContentKey","cmsBranch","branchFromContentKey","diffs","labelToStatus","updatedAt","getUpdateDate","reduce","unpublishedEntry","checkoutLocalBranch","branchExists","gpgSign","addConfig","rebase","toDelete","description","statusToLabel","mergeFromTo","merge","deleteLocalBranch","mediaFiles","targetRelative","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","createOptions","logLevel","opts","registerCommonMiddlewares"],"sourceRoot":""}